// Code generated by protoc-gen-go. 
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: snakechat.proto

package defproto

import (
	waE2E "go.mau.fi/whatsmeow/proto/waE2E"
	waHistorySync "go.mau.fi/whatsmeow/proto/waHistorySync"
	waSyncAction "go.mau.fi/whatsmeow/proto/waSyncAction"
	waVnameCert "go.mau.fi/whatsmeow/proto/waVnameCert"
	waWeb "go.mau.fi/whatsmeow/proto/waWeb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewsletterRole int32

const (
	NewsletterRole_SUBSCRIBER NewsletterRole = 1
	NewsletterRole_GUEST      NewsletterRole = 2
	NewsletterRole_ADMIN      NewsletterRole = 3
	NewsletterRole_OWNER      NewsletterRole = 4
)

// Enum value maps for NewsletterRole.
var (
	NewsletterRole_name = map[int32]string{
		1: "SUBSCRIBER",
		2: "GUEST",
		3: "ADMIN",
		4: "OWNER",
	}
	NewsletterRole_value = map[string]int32{
		"SUBSCRIBER": 1,
		"GUEST":      2,
		"ADMIN":      3,
		"OWNER":      4,
	}
)

func (x NewsletterRole) Enum() *NewsletterRole {
	p := new(NewsletterRole)
	*p = x
	return p
}

func (x NewsletterRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewsletterRole) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[0].Descriptor()
}

func (NewsletterRole) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[0]
}

func (x NewsletterRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NewsletterRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NewsletterRole(num)
	return nil
}

// Deprecated: Use NewsletterRole.Descriptor instead.
func (NewsletterRole) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{0}
}

type NewsletterMuteState int32

const (
	NewsletterMuteState_ON  NewsletterMuteState = 1
	NewsletterMuteState_OFF NewsletterMuteState = 2
)

// Enum value maps for NewsletterMuteState.
var (
	NewsletterMuteState_name = map[int32]string{
		1: "ON",
		2: "OFF",
	}
	NewsletterMuteState_value = map[string]int32{
		"ON":  1,
		"OFF": 2,
	}
)

func (x NewsletterMuteState) Enum() *NewsletterMuteState {
	p := new(NewsletterMuteState)
	*p = x
	return p
}

func (x NewsletterMuteState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewsletterMuteState) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[1].Descriptor()
}

func (NewsletterMuteState) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[1]
}

func (x NewsletterMuteState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NewsletterMuteState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NewsletterMuteState(num)
	return nil
}

// Deprecated: Use NewsletterMuteState.Descriptor instead.
func (NewsletterMuteState) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{1}
}

type ConnectFailureReason int32

const (
	ConnectFailureReason_GENERIC               ConnectFailureReason = 1
	ConnectFailureReason_LOGGED_OUT            ConnectFailureReason = 2
	ConnectFailureReason_TEMP_BANNED           ConnectFailureReason = 3
	ConnectFailureReason_MAIN_DEVICE_GONE      ConnectFailureReason = 4
	ConnectFailureReason_UNKNOWN_LOGOUT        ConnectFailureReason = 5
	ConnectFailureReason_CLIENT_OUTDATED       ConnectFailureReason = 6
	ConnectFailureReason_BAD_USER_AGENT        ConnectFailureReason = 7
	ConnectFailureReason_INTERNAL_SERVER_ERROR ConnectFailureReason = 8
	ConnectFailureReason_EXPERIMENTAL          ConnectFailureReason = 9
	ConnectFailureReason_SERVICE_UNAVAILABLE   ConnectFailureReason = 10
)

// Enum value maps for ConnectFailureReason.
var (
	ConnectFailureReason_name = map[int32]string{
		1:  "GENERIC",
		2:  "LOGGED_OUT",
		3:  "TEMP_BANNED",
		4:  "MAIN_DEVICE_GONE",
		5:  "UNKNOWN_LOGOUT",
		6:  "CLIENT_OUTDATED",
		7:  "BAD_USER_AGENT",
		8:  "INTERNAL_SERVER_ERROR",
		9:  "EXPERIMENTAL",
		10: "SERVICE_UNAVAILABLE",
	}
	ConnectFailureReason_value = map[string]int32{
		"GENERIC":               1,
		"LOGGED_OUT":            2,
		"TEMP_BANNED":           3,
		"MAIN_DEVICE_GONE":      4,
		"UNKNOWN_LOGOUT":        5,
		"CLIENT_OUTDATED":       6,
		"BAD_USER_AGENT":        7,
		"INTERNAL_SERVER_ERROR": 8,
		"EXPERIMENTAL":          9,
		"SERVICE_UNAVAILABLE":   10,
	}
)

func (x ConnectFailureReason) Enum() *ConnectFailureReason {
	p := new(ConnectFailureReason)
	*p = x
	return p
}

func (x ConnectFailureReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectFailureReason) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[2].Descriptor()
}

func (ConnectFailureReason) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[2]
}

func (x ConnectFailureReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConnectFailureReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConnectFailureReason(num)
	return nil
}

// Deprecated: Use ConnectFailureReason.Descriptor instead.
func (ConnectFailureReason) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{2}
}

type GroupInfo_GroupMemberAddMode int32

const (
	GroupInfo_GroupMemberAddModeAdmin GroupInfo_GroupMemberAddMode = 1
)

// Enum value maps for GroupInfo_GroupMemberAddMode.
var (
	GroupInfo_GroupMemberAddMode_name = map[int32]string{
		1: "GroupMemberAddModeAdmin",
	}
	GroupInfo_GroupMemberAddMode_value = map[string]int32{
		"GroupMemberAddModeAdmin": 1,
	}
)

func (x GroupInfo_GroupMemberAddMode) Enum() *GroupInfo_GroupMemberAddMode {
	p := new(GroupInfo_GroupMemberAddMode)
	*p = x
	return p
}

func (x GroupInfo_GroupMemberAddMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupInfo_GroupMemberAddMode) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[3].Descriptor()
}

func (GroupInfo_GroupMemberAddMode) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[3]
}

func (x GroupInfo_GroupMemberAddMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupInfo_GroupMemberAddMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupInfo_GroupMemberAddMode(num)
	return nil
}

// Deprecated: Use GroupInfo_GroupMemberAddMode.Descriptor instead.
func (GroupInfo_GroupMemberAddMode) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{20, 0}
}

type WrappedNewsletterState_NewsletterState int32

const (
	WrappedNewsletterState_ACTIVE       WrappedNewsletterState_NewsletterState = 1
	WrappedNewsletterState_SUSPENDED    WrappedNewsletterState_NewsletterState = 2
	WrappedNewsletterState_GEOSUSPENDED WrappedNewsletterState_NewsletterState = 3
)

// Enum value maps for WrappedNewsletterState_NewsletterState.
var (
	WrappedNewsletterState_NewsletterState_name = map[int32]string{
		1: "ACTIVE",
		2: "SUSPENDED",
		3: "GEOSUSPENDED",
	}
	WrappedNewsletterState_NewsletterState_value = map[string]int32{
		"ACTIVE":       1,
		"SUSPENDED":    2,
		"GEOSUSPENDED": 3,
	}
)

func (x WrappedNewsletterState_NewsletterState) Enum() *WrappedNewsletterState_NewsletterState {
	p := new(WrappedNewsletterState_NewsletterState)
	*p = x
	return p
}

func (x WrappedNewsletterState_NewsletterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WrappedNewsletterState_NewsletterState) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[4].Descriptor()
}

func (WrappedNewsletterState_NewsletterState) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[4]
}

func (x WrappedNewsletterState_NewsletterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WrappedNewsletterState_NewsletterState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WrappedNewsletterState_NewsletterState(num)
	return nil
}

// Deprecated: Use WrappedNewsletterState_NewsletterState.Descriptor instead.
func (WrappedNewsletterState_NewsletterState) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{46, 0}
}

type NewsletterReactionSettings_NewsletterReactionsMode int32

const (
	NewsletterReactionSettings_ALL       NewsletterReactionSettings_NewsletterReactionsMode = 1
	NewsletterReactionSettings_BASIC     NewsletterReactionSettings_NewsletterReactionsMode = 2
	NewsletterReactionSettings_NONE      NewsletterReactionSettings_NewsletterReactionsMode = 3
	NewsletterReactionSettings_BLOCKLIST NewsletterReactionSettings_NewsletterReactionsMode = 4
)

// Enum value maps for NewsletterReactionSettings_NewsletterReactionsMode.
var (
	NewsletterReactionSettings_NewsletterReactionsMode_name = map[int32]string{
		1: "ALL",
		2: "BASIC",
		3: "NONE",
		4: "BLOCKLIST",
	}
	NewsletterReactionSettings_NewsletterReactionsMode_value = map[string]int32{
		"ALL":       1,
		"BASIC":     2,
		"NONE":      3,
		"BLOCKLIST": 4,
	}
)

func (x NewsletterReactionSettings_NewsletterReactionsMode) Enum() *NewsletterReactionSettings_NewsletterReactionsMode {
	p := new(NewsletterReactionSettings_NewsletterReactionsMode)
	*p = x
	return p
}

func (x NewsletterReactionSettings_NewsletterReactionsMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewsletterReactionSettings_NewsletterReactionsMode) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[5].Descriptor()
}

func (NewsletterReactionSettings_NewsletterReactionsMode) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[5]
}

func (x NewsletterReactionSettings_NewsletterReactionsMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NewsletterReactionSettings_NewsletterReactionsMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NewsletterReactionSettings_NewsletterReactionsMode(num)
	return nil
}

// Deprecated: Use NewsletterReactionSettings_NewsletterReactionsMode.Descriptor instead.
func (NewsletterReactionSettings_NewsletterReactionsMode) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{49, 0}
}

type NewsletterThreadMetadata_NewsletterVerificationState int32

const (
	NewsletterThreadMetadata_VERIFIED   NewsletterThreadMetadata_NewsletterVerificationState = 1
	NewsletterThreadMetadata_UNVERIFIED NewsletterThreadMetadata_NewsletterVerificationState = 2
)

// Enum value maps for NewsletterThreadMetadata_NewsletterVerificationState.
var (
	NewsletterThreadMetadata_NewsletterVerificationState_name = map[int32]string{
		1: "VERIFIED",
		2: "UNVERIFIED",
	}
	NewsletterThreadMetadata_NewsletterVerificationState_value = map[string]int32{
		"VERIFIED":   1,
		"UNVERIFIED": 2,
	}
)

func (x NewsletterThreadMetadata_NewsletterVerificationState) Enum() *NewsletterThreadMetadata_NewsletterVerificationState {
	p := new(NewsletterThreadMetadata_NewsletterVerificationState)
	*p = x
	return p
}

func (x NewsletterThreadMetadata_NewsletterVerificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewsletterThreadMetadata_NewsletterVerificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[6].Descriptor()
}

func (NewsletterThreadMetadata_NewsletterVerificationState) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[6]
}

func (x NewsletterThreadMetadata_NewsletterVerificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NewsletterThreadMetadata_NewsletterVerificationState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NewsletterThreadMetadata_NewsletterVerificationState(num)
	return nil
}

// Deprecated: Use NewsletterThreadMetadata_NewsletterVerificationState.Descriptor instead.
func (NewsletterThreadMetadata_NewsletterVerificationState) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{51, 0}
}

type PrivacySettings_PrivacySetting int32

const (
	PrivacySettings_UNDEFINED         PrivacySettings_PrivacySetting = 1
	PrivacySettings_ALL               PrivacySettings_PrivacySetting = 2
	PrivacySettings_CONTACTS          PrivacySettings_PrivacySetting = 3
	PrivacySettings_CONTACT_BLACKLIST PrivacySettings_PrivacySetting = 4
	PrivacySettings_MATCH_LAST_SEEN   PrivacySettings_PrivacySetting = 5
	PrivacySettings_KNOWN             PrivacySettings_PrivacySetting = 6
	PrivacySettings_NONE              PrivacySettings_PrivacySetting = 7
)

// Enum value maps for PrivacySettings_PrivacySetting.
var (
	PrivacySettings_PrivacySetting_name = map[int32]string{
		1: "UNDEFINED",
		2: "ALL",
		3: "CONTACTS",
		4: "CONTACT_BLACKLIST",
		5: "MATCH_LAST_SEEN",
		6: "KNOWN",
		7: "NONE",
	}
	PrivacySettings_PrivacySetting_value = map[string]int32{
		"UNDEFINED":         1,
		"ALL":               2,
		"CONTACTS":          3,
		"CONTACT_BLACKLIST": 4,
		"MATCH_LAST_SEEN":   5,
		"KNOWN":             6,
		"NONE":              7,
	}
)

func (x PrivacySettings_PrivacySetting) Enum() *PrivacySettings_PrivacySetting {
	p := new(PrivacySettings_PrivacySetting)
	*p = x
	return p
}

func (x PrivacySettings_PrivacySetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivacySettings_PrivacySetting) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[7].Descriptor()
}

func (PrivacySettings_PrivacySetting) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[7]
}

func (x PrivacySettings_PrivacySetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PrivacySettings_PrivacySetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PrivacySettings_PrivacySetting(num)
	return nil
}

// Deprecated: Use PrivacySettings_PrivacySetting.Descriptor instead.
func (PrivacySettings_PrivacySetting) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{58, 0}
}

type StatusPrivacy_StatusPrivacyType int32

const (
	StatusPrivacy_CONTACTS  StatusPrivacy_StatusPrivacyType = 1
	StatusPrivacy_BLACKLIST StatusPrivacy_StatusPrivacyType = 2
	StatusPrivacy_WHITELIST StatusPrivacy_StatusPrivacyType = 3
)

// Enum value maps for StatusPrivacy_StatusPrivacyType.
var (
	StatusPrivacy_StatusPrivacyType_name = map[int32]string{
		1: "CONTACTS",
		2: "BLACKLIST",
		3: "WHITELIST",
	}
	StatusPrivacy_StatusPrivacyType_value = map[string]int32{
		"CONTACTS":  1,
		"BLACKLIST": 2,
		"WHITELIST": 3,
	}
)

func (x StatusPrivacy_StatusPrivacyType) Enum() *StatusPrivacy_StatusPrivacyType {
	p := new(StatusPrivacy_StatusPrivacyType)
	*p = x
	return p
}

func (x StatusPrivacy_StatusPrivacyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusPrivacy_StatusPrivacyType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[8].Descriptor()
}

func (StatusPrivacy_StatusPrivacyType) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[8]
}

func (x StatusPrivacy_StatusPrivacyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StatusPrivacy_StatusPrivacyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StatusPrivacy_StatusPrivacyType(num)
	return nil
}

// Deprecated: Use StatusPrivacy_StatusPrivacyType.Descriptor instead.
func (StatusPrivacy_StatusPrivacyType) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{64, 0}
}

type GroupLinkChange_ChangeType int32

const (
	GroupLinkChange_PARENT  GroupLinkChange_ChangeType = 1
	GroupLinkChange_SUB     GroupLinkChange_ChangeType = 2
	GroupLinkChange_SIBLING GroupLinkChange_ChangeType = 3
)

// Enum value maps for GroupLinkChange_ChangeType.
var (
	GroupLinkChange_ChangeType_name = map[int32]string{
		1: "PARENT",
		2: "SUB",
		3: "SIBLING",
	}
	GroupLinkChange_ChangeType_value = map[string]int32{
		"PARENT":  1,
		"SUB":     2,
		"SIBLING": 3,
	}
)

func (x GroupLinkChange_ChangeType) Enum() *GroupLinkChange_ChangeType {
	p := new(GroupLinkChange_ChangeType)
	*p = x
	return p
}

func (x GroupLinkChange_ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupLinkChange_ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[9].Descriptor()
}

func (GroupLinkChange_ChangeType) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[9]
}

func (x GroupLinkChange_ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupLinkChange_ChangeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupLinkChange_ChangeType(num)
	return nil
}

// Deprecated: Use GroupLinkChange_ChangeType.Descriptor instead.
func (GroupLinkChange_ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{67, 0}
}

type PatchInfo_WAPatchName int32

const (
	PatchInfo_CRITICAL_BLOCK       PatchInfo_WAPatchName = 1
	PatchInfo_CRITICAL_UNBLOCK_LOW PatchInfo_WAPatchName = 2
	PatchInfo_REGULAR_LOW          PatchInfo_WAPatchName = 3
	PatchInfo_REGULAR_HIGH         PatchInfo_WAPatchName = 4
	PatchInfo_REGULAR              PatchInfo_WAPatchName = 5
)

// Enum value maps for PatchInfo_WAPatchName.
var (
	PatchInfo_WAPatchName_name = map[int32]string{
		1: "CRITICAL_BLOCK",
		2: "CRITICAL_UNBLOCK_LOW",
		3: "REGULAR_LOW",
		4: "REGULAR_HIGH",
		5: "REGULAR",
	}
	PatchInfo_WAPatchName_value = map[string]int32{
		"CRITICAL_BLOCK":       1,
		"CRITICAL_UNBLOCK_LOW": 2,
		"REGULAR_LOW":          3,
		"REGULAR_HIGH":         4,
		"REGULAR":              5,
	}
)

func (x PatchInfo_WAPatchName) Enum() *PatchInfo_WAPatchName {
	p := new(PatchInfo_WAPatchName)
	*p = x
	return p
}

func (x PatchInfo_WAPatchName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchInfo_WAPatchName) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[10].Descriptor()
}

func (PatchInfo_WAPatchName) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[10]
}

func (x PatchInfo_WAPatchName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PatchInfo_WAPatchName) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PatchInfo_WAPatchName(num)
	return nil
}

// Deprecated: Use PatchInfo_WAPatchName.Descriptor instead.
func (PatchInfo_WAPatchName) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{78, 0}
}

type PairStatus_PStatus int32

const (
	PairStatus_ERROR   PairStatus_PStatus = 1
	PairStatus_SUCCESS PairStatus_PStatus = 2
)

// Enum value maps for PairStatus_PStatus.
var (
	PairStatus_PStatus_name = map[int32]string{
		1: "ERROR",
		2: "SUCCESS",
	}
	PairStatus_PStatus_value = map[string]int32{
		"ERROR":   1,
		"SUCCESS": 2,
	}
)

func (x PairStatus_PStatus) Enum() *PairStatus_PStatus {
	p := new(PairStatus_PStatus)
	*p = x
	return p
}

func (x PairStatus_PStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PairStatus_PStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[11].Descriptor()
}

func (PairStatus_PStatus) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[11]
}

func (x PairStatus_PStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PairStatus_PStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PairStatus_PStatus(num)
	return nil
}

// Deprecated: Use PairStatus_PStatus.Descriptor instead.
func (PairStatus_PStatus) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{88, 0}
}

type TemporaryBan_TempBanReason int32

const (
	TemporaryBan_SEND_TO_TOO_MANY_PEOPLE    TemporaryBan_TempBanReason = 1
	TemporaryBan_BLOCKED_BY_USERS           TemporaryBan_TempBanReason = 2
	TemporaryBan_CREATED_TOO_MANY_GROUPS    TemporaryBan_TempBanReason = 3
	TemporaryBan_SENT_TOO_MANY_SAME_MESSAGE TemporaryBan_TempBanReason = 4
	TemporaryBan_BROADCAST_LIST             TemporaryBan_TempBanReason = 5
)

// Enum value maps for TemporaryBan_TempBanReason.
var (
	TemporaryBan_TempBanReason_name = map[int32]string{
		1: "SEND_TO_TOO_MANY_PEOPLE",
		2: "BLOCKED_BY_USERS",
		3: "CREATED_TOO_MANY_GROUPS",
		4: "SENT_TOO_MANY_SAME_MESSAGE",
		5: "BROADCAST_LIST",
	}
	TemporaryBan_TempBanReason_value = map[string]int32{
		"SEND_TO_TOO_MANY_PEOPLE":    1,
		"BLOCKED_BY_USERS":           2,
		"CREATED_TOO_MANY_GROUPS":    3,
		"SENT_TOO_MANY_SAME_MESSAGE": 4,
		"BROADCAST_LIST":             5,
	}
)

func (x TemporaryBan_TempBanReason) Enum() *TemporaryBan_TempBanReason {
	p := new(TemporaryBan_TempBanReason)
	*p = x
	return p
}

func (x TemporaryBan_TempBanReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemporaryBan_TempBanReason) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[12].Descriptor()
}

func (TemporaryBan_TempBanReason) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[12]
}

func (x TemporaryBan_TempBanReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TemporaryBan_TempBanReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TemporaryBan_TempBanReason(num)
	return nil
}

// Deprecated: Use TemporaryBan_TempBanReason.Descriptor instead.
func (TemporaryBan_TempBanReason) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{94, 0}
}

type Receipt_ReceiptType int32

const (
	Receipt_DELIVERED    Receipt_ReceiptType = 1
	Receipt_SENDER       Receipt_ReceiptType = 2
	Receipt_RETRY        Receipt_ReceiptType = 3
	Receipt_READ         Receipt_ReceiptType = 4
	Receipt_READ_SELF    Receipt_ReceiptType = 5
	Receipt_PLAYED       Receipt_ReceiptType = 6
	Receipt_PLAYED_SELF  Receipt_ReceiptType = 7
	Receipt_SERVER_ERROR Receipt_ReceiptType = 8
	Receipt_INACTIVE     Receipt_ReceiptType = 9
	Receipt_PEER_MSG     Receipt_ReceiptType = 10
	Receipt_HISTORY_SYNC Receipt_ReceiptType = 11
)

// Enum value maps for Receipt_ReceiptType.
var (
	Receipt_ReceiptType_name = map[int32]string{
		1:  "DELIVERED",
		2:  "SENDER",
		3:  "RETRY",
		4:  "READ",
		5:  "READ_SELF",
		6:  "PLAYED",
		7:  "PLAYED_SELF",
		8:  "SERVER_ERROR",
		9:  "INACTIVE",
		10: "PEER_MSG",
		11: "HISTORY_SYNC",
	}
	Receipt_ReceiptType_value = map[string]int32{
		"DELIVERED":    1,
		"SENDER":       2,
		"RETRY":        3,
		"READ":         4,
		"READ_SELF":    5,
		"PLAYED":       6,
		"PLAYED_SELF":  7,
		"SERVER_ERROR": 8,
		"INACTIVE":     9,
		"PEER_MSG":     10,
		"HISTORY_SYNC": 11,
	}
)

func (x Receipt_ReceiptType) Enum() *Receipt_ReceiptType {
	p := new(Receipt_ReceiptType)
	*p = x
	return p
}

func (x Receipt_ReceiptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Receipt_ReceiptType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[13].Descriptor()
}

func (Receipt_ReceiptType) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[13]
}

func (x Receipt_ReceiptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Receipt_ReceiptType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Receipt_ReceiptType(num)
	return nil
}

// Deprecated: Use Receipt_ReceiptType.Descriptor instead.
func (Receipt_ReceiptType) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{100, 0}
}

type ChatPresence_ChatPresence int32

const (
	ChatPresence_COMPOSING ChatPresence_ChatPresence = 1
	ChatPresence_PAUSED    ChatPresence_ChatPresence = 2
)

// Enum value maps for ChatPresence_ChatPresence.
var (
	ChatPresence_ChatPresence_name = map[int32]string{
		1: "COMPOSING",
		2: "PAUSED",
	}
	ChatPresence_ChatPresence_value = map[string]int32{
		"COMPOSING": 1,
		"PAUSED":    2,
	}
)

func (x ChatPresence_ChatPresence) Enum() *ChatPresence_ChatPresence {
	p := new(ChatPresence_ChatPresence)
	*p = x
	return p
}

func (x ChatPresence_ChatPresence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatPresence_ChatPresence) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[14].Descriptor()
}

func (ChatPresence_ChatPresence) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[14]
}

func (x ChatPresence_ChatPresence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChatPresence_ChatPresence) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChatPresence_ChatPresence(num)
	return nil
}

// Deprecated: Use ChatPresence_ChatPresence.Descriptor instead.
func (ChatPresence_ChatPresence) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{101, 0}
}

type ChatPresence_ChatPresenceMedia int32

const (
	ChatPresence_TEXT  ChatPresence_ChatPresenceMedia = 1
	ChatPresence_AUDIO ChatPresence_ChatPresenceMedia = 2
)

// Enum value maps for ChatPresence_ChatPresenceMedia.
var (
	ChatPresence_ChatPresenceMedia_name = map[int32]string{
		1: "TEXT",
		2: "AUDIO",
	}
	ChatPresence_ChatPresenceMedia_value = map[string]int32{
		"TEXT":  1,
		"AUDIO": 2,
	}
)

func (x ChatPresence_ChatPresenceMedia) Enum() *ChatPresence_ChatPresenceMedia {
	p := new(ChatPresence_ChatPresenceMedia)
	*p = x
	return p
}

func (x ChatPresence_ChatPresenceMedia) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatPresence_ChatPresenceMedia) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[15].Descriptor()
}

func (ChatPresence_ChatPresenceMedia) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[15]
}

func (x ChatPresence_ChatPresenceMedia) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChatPresence_ChatPresenceMedia) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChatPresence_ChatPresenceMedia(num)
	return nil
}

// Deprecated: Use ChatPresence_ChatPresenceMedia.Descriptor instead.
func (ChatPresence_ChatPresenceMedia) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{101, 1}
}

type BlocklistEvent_Actions int32

const (
	BlocklistEvent_DEFAULT BlocklistEvent_Actions = 1
	BlocklistEvent_MODIFY  BlocklistEvent_Actions = 2
)

// Enum value maps for BlocklistEvent_Actions.
var (
	BlocklistEvent_Actions_name = map[int32]string{
		1: "DEFAULT",
		2: "MODIFY",
	}
	BlocklistEvent_Actions_value = map[string]int32{
		"DEFAULT": 1,
		"MODIFY":  2,
	}
)

func (x BlocklistEvent_Actions) Enum() *BlocklistEvent_Actions {
	p := new(BlocklistEvent_Actions)
	*p = x
	return p
}

func (x BlocklistEvent_Actions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlocklistEvent_Actions) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[16].Descriptor()
}

func (BlocklistEvent_Actions) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[16]
}

func (x BlocklistEvent_Actions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BlocklistEvent_Actions) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BlocklistEvent_Actions(num)
	return nil
}

// Deprecated: Use BlocklistEvent_Actions.Descriptor instead.
func (BlocklistEvent_Actions) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{110, 0}
}

type BlocklistChange_Action int32

const (
	BlocklistChange_BLOCK   BlocklistChange_Action = 1
	BlocklistChange_UNBLOCK BlocklistChange_Action = 2
)

// Enum value maps for BlocklistChange_Action.
var (
	BlocklistChange_Action_name = map[int32]string{
		1: "BLOCK",
		2: "UNBLOCK",
	}
	BlocklistChange_Action_value = map[string]int32{
		"BLOCK":   1,
		"UNBLOCK": 2,
	}
)

func (x BlocklistChange_Action) Enum() *BlocklistChange_Action {
	p := new(BlocklistChange_Action)
	*p = x
	return p
}

func (x BlocklistChange_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlocklistChange_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_snakechat_proto_enumTypes[17].Descriptor()
}

func (BlocklistChange_Action) Type() protoreflect.EnumType {
	return &file_snakechat_proto_enumTypes[17]
}

func (x BlocklistChange_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BlocklistChange_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BlocklistChange_Action(num)
	return nil
}

// Deprecated: Use BlocklistChange_Action.Descriptor instead.
func (BlocklistChange_Action) EnumDescriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{111, 0}
}

// types
type JID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       *string `protobuf:"bytes,1,req,name=User" json:"User,omitempty"`
	RawAgent   *uint32 `protobuf:"varint,2,req,name=RawAgent" json:"RawAgent,omitempty"`
	Device     *uint32 `protobuf:"varint,3,req,name=Device" json:"Device,omitempty"`
	Integrator *uint32 `protobuf:"varint,4,req,name=Integrator" json:"Integrator,omitempty"`
	Server     *string `protobuf:"bytes,5,req,name=Server" json:"Server,omitempty"`
	IsEmpty    *bool   `protobuf:"varint,6,opt,name=IsEmpty,def=0" json:"IsEmpty,omitempty"`
}

// Default values for JID fields.
const (
	Default_JID_IsEmpty = bool(false)
)

func (x *JID) Reset() {
	*x = JID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JID) ProtoMessage() {}

func (x *JID) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JID.ProtoReflect.Descriptor instead.
func (*JID) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{0}
}

func (x *JID) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *JID) GetRawAgent() uint32 {
	if x != nil && x.RawAgent != nil {
		return *x.RawAgent
	}
	return 0
}

func (x *JID) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *JID) GetIntegrator() uint32 {
	if x != nil && x.Integrator != nil {
		return *x.Integrator
	}
	return 0
}

func (x *JID) GetServer() string {
	if x != nil && x.Server != nil {
		return *x.Server
	}
	return ""
}

func (x *JID) GetIsEmpty() bool {
	if x != nil && x.IsEmpty != nil {
		return *x.IsEmpty
	}
	return Default_JID_IsEmpty
}

type MessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageSource  *MessageSource  `protobuf:"bytes,1,req,name=MessageSource" json:"MessageSource,omitempty"`
	ID             *string         `protobuf:"bytes,2,req,name=ID" json:"ID,omitempty"`
	ServerID       *int64          `protobuf:"varint,3,req,name=ServerID" json:"ServerID,omitempty"`
	Type           *string         `protobuf:"bytes,4,req,name=Type" json:"Type,omitempty"`
	Pushname       *string         `protobuf:"bytes,5,req,name=Pushname" json:"Pushname,omitempty"`
	Timestamp      *int64          `protobuf:"varint,6,req,name=Timestamp" json:"Timestamp,omitempty"`
	Category       *string         `protobuf:"bytes,7,req,name=Category" json:"Category,omitempty"`
	Multicast      *bool           `protobuf:"varint,8,req,name=Multicast" json:"Multicast,omitempty"`
	MediaType      *string         `protobuf:"bytes,9,req,name=MediaType" json:"MediaType,omitempty"`
	Edit           *string         `protobuf:"bytes,10,req,name=Edit" json:"Edit,omitempty"` //enum
	VerifiedName   *VerifiedName   `protobuf:"bytes,11,opt,name=VerifiedName" json:"VerifiedName,omitempty"`
	DeviceSentMeta *DeviceSentMeta `protobuf:"bytes,12,opt,name=DeviceSentMeta" json:"DeviceSentMeta,omitempty"`
}

func (x *MessageInfo) Reset() {
	*x = MessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInfo) ProtoMessage() {}

func (x *MessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInfo.ProtoReflect.Descriptor instead.
func (*MessageInfo) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{1}
}

func (x *MessageInfo) GetMessageSource() *MessageSource {
	if x != nil {
		return x.MessageSource
	}
	return nil
}

func (x *MessageInfo) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *MessageInfo) GetServerID() int64 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *MessageInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MessageInfo) GetPushname() string {
	if x != nil && x.Pushname != nil {
		return *x.Pushname
	}
	return ""
}

func (x *MessageInfo) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *MessageInfo) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *MessageInfo) GetMulticast() bool {
	if x != nil && x.Multicast != nil {
		return *x.Multicast
	}
	return false
}

func (x *MessageInfo) GetMediaType() string {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return ""
}

func (x *MessageInfo) GetEdit() string {
	if x != nil && x.Edit != nil {
		return *x.Edit
	}
	return ""
}

func (x *MessageInfo) GetVerifiedName() *VerifiedName {
	if x != nil {
		return x.VerifiedName
	}
	return nil
}

func (x *MessageInfo) GetDeviceSentMeta() *DeviceSentMeta {
	if x != nil {
		return x.DeviceSentMeta
	}
	return nil
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           *string `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	DirectPath    *string `protobuf:"bytes,2,req,name=DirectPath" json:"DirectPath,omitempty"`
	Handle        *string `protobuf:"bytes,3,req,name=Handle" json:"Handle,omitempty"`
	MediaKey      []byte  `protobuf:"bytes,4,req,name=MediaKey" json:"MediaKey,omitempty"`
	FileEncSHA256 []byte  `protobuf:"bytes,5,req,name=FileEncSHA256" json:"FileEncSHA256,omitempty"`
	FileSHA256    []byte  `protobuf:"bytes,6,req,name=FileSHA256" json:"FileSHA256,omitempty"`
	FileLength    *uint32 `protobuf:"varint,7,req,name=FileLength" json:"FileLength,omitempty"`
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{2}
}

func (x *UploadResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *UploadResponse) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *UploadResponse) GetHandle() string {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return ""
}

func (x *UploadResponse) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *UploadResponse) GetFileEncSHA256() []byte {
	if x != nil {
		return x.FileEncSHA256
	}
	return nil
}

func (x *UploadResponse) GetFileSHA256() []byte {
	if x != nil {
		return x.FileSHA256
	}
	return nil
}

func (x *UploadResponse) GetFileLength() uint32 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

type MessageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chat               *JID  `protobuf:"bytes,1,req,name=Chat" json:"Chat,omitempty"`
	Sender             *JID  `protobuf:"bytes,2,req,name=Sender" json:"Sender,omitempty"`
	IsFromMe           *bool `protobuf:"varint,3,req,name=IsFromMe" json:"IsFromMe,omitempty"`
	IsGroup            *bool `protobuf:"varint,4,req,name=IsGroup" json:"IsGroup,omitempty"`
	BroadcastListOwner *JID  `protobuf:"bytes,5,req,name=BroadcastListOwner" json:"BroadcastListOwner,omitempty"`
}

func (x *MessageSource) Reset() {
	*x = MessageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSource) ProtoMessage() {}

func (x *MessageSource) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSource.ProtoReflect.Descriptor instead.
func (*MessageSource) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{3}
}

func (x *MessageSource) GetChat() *JID {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *MessageSource) GetSender() *JID {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MessageSource) GetIsFromMe() bool {
	if x != nil && x.IsFromMe != nil {
		return *x.IsFromMe
	}
	return false
}

func (x *MessageSource) GetIsGroup() bool {
	if x != nil && x.IsGroup != nil {
		return *x.IsGroup
	}
	return false
}

func (x *MessageSource) GetBroadcastListOwner() *JID {
	if x != nil {
		return x.BroadcastListOwner
	}
	return nil
}

type DeviceSentMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationJID *string `protobuf:"bytes,1,req,name=DestinationJID" json:"DestinationJID,omitempty"`
	Phash          *string `protobuf:"bytes,2,req,name=Phash" json:"Phash,omitempty"`
}

func (x *DeviceSentMeta) Reset() {
	*x = DeviceSentMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSentMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSentMeta) ProtoMessage() {}

func (x *DeviceSentMeta) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSentMeta.ProtoReflect.Descriptor instead.
func (*DeviceSentMeta) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceSentMeta) GetDestinationJID() string {
	if x != nil && x.DestinationJID != nil {
		return *x.DestinationJID
	}
	return ""
}

func (x *DeviceSentMeta) GetPhash() string {
	if x != nil && x.Phash != nil {
		return *x.Phash
	}
	return ""
}

// }
type VerifiedName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *waVnameCert.VerifiedNameCertificate         `protobuf:"bytes,1,opt,name=Certificate" json:"Certificate,omitempty"`
	Details     *waVnameCert.VerifiedNameCertificate_Details `protobuf:"bytes,2,opt,name=Details" json:"Details,omitempty"`
}

func (x *VerifiedName) Reset() {
	*x = VerifiedName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiedName) ProtoMessage() {}

func (x *VerifiedName) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiedName.ProtoReflect.Descriptor instead.
func (*VerifiedName) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{5}
}

func (x *VerifiedName) GetCertificate() *waVnameCert.VerifiedNameCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *VerifiedName) GetDetails() *waVnameCert.VerifiedNameCertificate_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type IsOnWhatsAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        *string       `protobuf:"bytes,1,req,name=Query" json:"Query,omitempty"`
	JID          *JID          `protobuf:"bytes,2,req,name=JID" json:"JID,omitempty"`
	IsIn         *bool         `protobuf:"varint,3,req,name=IsIn" json:"IsIn,omitempty"`
	VerifiedName *VerifiedName `protobuf:"bytes,4,opt,name=VerifiedName" json:"VerifiedName,omitempty"`
}

func (x *IsOnWhatsAppResponse) Reset() {
	*x = IsOnWhatsAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOnWhatsAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOnWhatsAppResponse) ProtoMessage() {}

func (x *IsOnWhatsAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOnWhatsAppResponse.ProtoReflect.Descriptor instead.
func (*IsOnWhatsAppResponse) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{6}
}

func (x *IsOnWhatsAppResponse) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *IsOnWhatsAppResponse) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *IsOnWhatsAppResponse) GetIsIn() bool {
	if x != nil && x.IsIn != nil {
		return *x.IsIn
	}
	return false
}

func (x *IsOnWhatsAppResponse) GetVerifiedName() *VerifiedName {
	if x != nil {
		return x.VerifiedName
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedName *VerifiedName `protobuf:"bytes,1,opt,name=VerifiedName" json:"VerifiedName,omitempty"`
	Status       *string       `protobuf:"bytes,2,req,name=Status" json:"Status,omitempty"`
	PictureID    *string       `protobuf:"bytes,3,req,name=PictureID" json:"PictureID,omitempty"`
	Devices      []*JID        `protobuf:"bytes,4,rep,name=Devices" json:"Devices,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfo) GetVerifiedName() *VerifiedName {
	if x != nil {
		return x.VerifiedName
	}
	return nil
}

func (x *UserInfo) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *UserInfo) GetPictureID() string {
	if x != nil && x.PictureID != nil {
		return *x.PictureID
	}
	return ""
}

func (x *UserInfo) GetDevices() []*JID {
	if x != nil {
		return x.Devices
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID           *JID    `protobuf:"bytes,1,opt,name=JID" json:"JID,omitempty"`
	Platform      *string `protobuf:"bytes,2,req,name=Platform" json:"Platform,omitempty"`
	BussinessName *string `protobuf:"bytes,3,req,name=BussinessName" json:"BussinessName,omitempty"`
	PushName      *string `protobuf:"bytes,4,req,name=PushName" json:"PushName,omitempty"`
	Initialized   *bool   `protobuf:"varint,5,req,name=Initialized" json:"Initialized,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{8}
}

func (x *Device) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *Device) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *Device) GetBussinessName() string {
	if x != nil && x.BussinessName != nil {
		return *x.BussinessName
	}
	return ""
}

func (x *Device) GetPushName() string {
	if x != nil && x.PushName != nil {
		return *x.PushName
	}
	return ""
}

func (x *Device) GetInitialized() bool {
	if x != nil && x.Initialized != nil {
		return *x.Initialized
	}
	return false
}

// GROUP
type GroupName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	NameSetAt *int64  `protobuf:"varint,2,req,name=NameSetAt" json:"NameSetAt,omitempty"`
	NameSetBy *JID    `protobuf:"bytes,3,req,name=NameSetBy" json:"NameSetBy,omitempty"`
}

func (x *GroupName) Reset() {
	*x = GroupName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupName) ProtoMessage() {}

func (x *GroupName) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupName.ProtoReflect.Descriptor instead.
func (*GroupName) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{9}
}

func (x *GroupName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GroupName) GetNameSetAt() int64 {
	if x != nil && x.NameSetAt != nil {
		return *x.NameSetAt
	}
	return 0
}

func (x *GroupName) GetNameSetBy() *JID {
	if x != nil {
		return x.NameSetBy
	}
	return nil
}

type GroupTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic        *string `protobuf:"bytes,1,req,name=Topic" json:"Topic,omitempty"`
	TopicID      *string `protobuf:"bytes,2,req,name=TopicID" json:"TopicID,omitempty"`
	TopicSetAt   *int64  `protobuf:"varint,3,req,name=TopicSetAt" json:"TopicSetAt,omitempty"`
	TopicSetBy   *JID    `protobuf:"bytes,4,req,name=TopicSetBy" json:"TopicSetBy,omitempty"`
	TopicDeleted *bool   `protobuf:"varint,5,req,name=TopicDeleted" json:"TopicDeleted,omitempty"`
}

func (x *GroupTopic) Reset() {
	*x = GroupTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTopic) ProtoMessage() {}

func (x *GroupTopic) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTopic.ProtoReflect.Descriptor instead.
func (*GroupTopic) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{10}
}

func (x *GroupTopic) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *GroupTopic) GetTopicID() string {
	if x != nil && x.TopicID != nil {
		return *x.TopicID
	}
	return ""
}

func (x *GroupTopic) GetTopicSetAt() int64 {
	if x != nil && x.TopicSetAt != nil {
		return *x.TopicSetAt
	}
	return 0
}

func (x *GroupTopic) GetTopicSetBy() *JID {
	if x != nil {
		return x.TopicSetBy
	}
	return nil
}

func (x *GroupTopic) GetTopicDeleted() bool {
	if x != nil && x.TopicDeleted != nil {
		return *x.TopicDeleted
	}
	return false
}

type GroupLocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLocked *bool `protobuf:"varint,1,req,name=isLocked" json:"isLocked,omitempty"`
}

func (x *GroupLocked) Reset() {
	*x = GroupLocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLocked) ProtoMessage() {}

func (x *GroupLocked) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLocked.ProtoReflect.Descriptor instead.
func (*GroupLocked) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{11}
}

func (x *GroupLocked) GetIsLocked() bool {
	if x != nil && x.IsLocked != nil {
		return *x.IsLocked
	}
	return false
}

type GroupAnnounce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAnnounce        *bool   `protobuf:"varint,1,req,name=IsAnnounce" json:"IsAnnounce,omitempty"`
	AnnounceVersionID *string `protobuf:"bytes,2,req,name=AnnounceVersionID" json:"AnnounceVersionID,omitempty"`
}

func (x *GroupAnnounce) Reset() {
	*x = GroupAnnounce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAnnounce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAnnounce) ProtoMessage() {}

func (x *GroupAnnounce) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAnnounce.ProtoReflect.Descriptor instead.
func (*GroupAnnounce) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{12}
}

func (x *GroupAnnounce) GetIsAnnounce() bool {
	if x != nil && x.IsAnnounce != nil {
		return *x.IsAnnounce
	}
	return false
}

func (x *GroupAnnounce) GetAnnounceVersionID() string {
	if x != nil && x.AnnounceVersionID != nil {
		return *x.AnnounceVersionID
	}
	return ""
}

type GroupEphemeral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEphemeral       *bool   `protobuf:"varint,1,req,name=IsEphemeral" json:"IsEphemeral,omitempty"`
	DisappearingTimer *uint32 `protobuf:"varint,2,req,name=DisappearingTimer" json:"DisappearingTimer,omitempty"`
}

func (x *GroupEphemeral) Reset() {
	*x = GroupEphemeral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupEphemeral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupEphemeral) ProtoMessage() {}

func (x *GroupEphemeral) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupEphemeral.ProtoReflect.Descriptor instead.
func (*GroupEphemeral) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{13}
}

func (x *GroupEphemeral) GetIsEphemeral() bool {
	if x != nil && x.IsEphemeral != nil {
		return *x.IsEphemeral
	}
	return false
}

func (x *GroupEphemeral) GetDisappearingTimer() uint32 {
	if x != nil && x.DisappearingTimer != nil {
		return *x.DisappearingTimer
	}
	return 0
}

type GroupIncognito struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsIncognito *bool `protobuf:"varint,1,req,name=IsIncognito" json:"IsIncognito,omitempty"`
}

func (x *GroupIncognito) Reset() {
	*x = GroupIncognito{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIncognito) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIncognito) ProtoMessage() {}

func (x *GroupIncognito) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIncognito.ProtoReflect.Descriptor instead.
func (*GroupIncognito) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{14}
}

func (x *GroupIncognito) GetIsIncognito() bool {
	if x != nil && x.IsIncognito != nil {
		return *x.IsIncognito
	}
	return false
}

type GroupParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsParent                      *bool   `protobuf:"varint,1,req,name=IsParent" json:"IsParent,omitempty"`
	DefaultMembershipApprovalMode *string `protobuf:"bytes,2,req,name=DefaultMembershipApprovalMode" json:"DefaultMembershipApprovalMode,omitempty"`
}

func (x *GroupParent) Reset() {
	*x = GroupParent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupParent) ProtoMessage() {}

func (x *GroupParent) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupParent.ProtoReflect.Descriptor instead.
func (*GroupParent) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{15}
}

func (x *GroupParent) GetIsParent() bool {
	if x != nil && x.IsParent != nil {
		return *x.IsParent
	}
	return false
}

func (x *GroupParent) GetDefaultMembershipApprovalMode() string {
	if x != nil && x.DefaultMembershipApprovalMode != nil {
		return *x.DefaultMembershipApprovalMode
	}
	return ""
}

type GroupLinkedParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedParentJID *JID `protobuf:"bytes,1,req,name=LinkedParentJID" json:"LinkedParentJID,omitempty"`
}

func (x *GroupLinkedParent) Reset() {
	*x = GroupLinkedParent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLinkedParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLinkedParent) ProtoMessage() {}

func (x *GroupLinkedParent) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLinkedParent.ProtoReflect.Descriptor instead.
func (*GroupLinkedParent) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{16}
}

func (x *GroupLinkedParent) GetLinkedParentJID() *JID {
	if x != nil {
		return x.LinkedParentJID
	}
	return nil
}

type GroupIsDefaultSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDefaultSubGroup *bool `protobuf:"varint,1,req,name=IsDefaultSubGroup" json:"IsDefaultSubGroup,omitempty"`
}

func (x *GroupIsDefaultSub) Reset() {
	*x = GroupIsDefaultSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIsDefaultSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIsDefaultSub) ProtoMessage() {}

func (x *GroupIsDefaultSub) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIsDefaultSub.ProtoReflect.Descriptor instead.
func (*GroupIsDefaultSub) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{17}
}

func (x *GroupIsDefaultSub) GetIsDefaultSubGroup() bool {
	if x != nil && x.IsDefaultSubGroup != nil {
		return *x.IsDefaultSubGroup
	}
	return false
}

type GroupParticipantAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       *string  `protobuf:"bytes,1,req,name=Code" json:"Code,omitempty"`
	Expiration *float32 `protobuf:"fixed32,2,req,name=Expiration" json:"Expiration,omitempty"`
}

func (x *GroupParticipantAddRequest) Reset() {
	*x = GroupParticipantAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupParticipantAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupParticipantAddRequest) ProtoMessage() {}

func (x *GroupParticipantAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupParticipantAddRequest.ProtoReflect.Descriptor instead.
func (*GroupParticipantAddRequest) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{18}
}

func (x *GroupParticipantAddRequest) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *GroupParticipantAddRequest) GetExpiration() float32 {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return 0
}

type GroupParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID          *JID                        `protobuf:"bytes,1,opt,name=JID" json:"JID,omitempty"`
	LID          *JID                        `protobuf:"bytes,2,req,name=LID" json:"LID,omitempty"`
	IsAdmin      *bool                       `protobuf:"varint,3,req,name=IsAdmin" json:"IsAdmin,omitempty"`
	IsSuperAdmin *bool                       `protobuf:"varint,4,req,name=IsSuperAdmin" json:"IsSuperAdmin,omitempty"`
	DisplayName  *string                     `protobuf:"bytes,5,req,name=DisplayName" json:"DisplayName,omitempty"`
	Error        *int32                      `protobuf:"varint,6,req,name=Error" json:"Error,omitempty"`
	AddRequest   *GroupParticipantAddRequest `protobuf:"bytes,7,opt,name=AddRequest" json:"AddRequest,omitempty"`
}

func (x *GroupParticipant) Reset() {
	*x = GroupParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupParticipant) ProtoMessage() {}

func (x *GroupParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupParticipant.ProtoReflect.Descriptor instead.
func (*GroupParticipant) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{19}
}

func (x *GroupParticipant) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *GroupParticipant) GetLID() *JID {
	if x != nil {
		return x.LID
	}
	return nil
}

func (x *GroupParticipant) GetIsAdmin() bool {
	if x != nil && x.IsAdmin != nil {
		return *x.IsAdmin
	}
	return false
}

func (x *GroupParticipant) GetIsSuperAdmin() bool {
	if x != nil && x.IsSuperAdmin != nil {
		return *x.IsSuperAdmin
	}
	return false
}

func (x *GroupParticipant) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *GroupParticipant) GetError() int32 {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return 0
}

func (x *GroupParticipant) GetAddRequest() *GroupParticipantAddRequest {
	if x != nil {
		return x.AddRequest
	}
	return nil
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerJID             *JID                `protobuf:"bytes,2,req,name=OwnerJID" json:"OwnerJID,omitempty"`
	JID                  *JID                `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	GroupName            *GroupName          `protobuf:"bytes,3,req,name=GroupName" json:"GroupName,omitempty"`
	GroupTopic           *GroupTopic         `protobuf:"bytes,4,req,name=GroupTopic" json:"GroupTopic,omitempty"`
	GroupLocked          *GroupLocked        `protobuf:"bytes,5,req,name=GroupLocked" json:"GroupLocked,omitempty"`
	GroupAnnounce        *GroupAnnounce      `protobuf:"bytes,6,req,name=GroupAnnounce" json:"GroupAnnounce,omitempty"`
	GroupEphemeral       *GroupEphemeral     `protobuf:"bytes,7,req,name=GroupEphemeral" json:"GroupEphemeral,omitempty"`
	GroupIncognito       *GroupIncognito     `protobuf:"bytes,8,req,name=GroupIncognito" json:"GroupIncognito,omitempty"`
	GroupParent          *GroupParent        `protobuf:"bytes,9,req,name=GroupParent" json:"GroupParent,omitempty"`
	GroupLinkedParent    *GroupLinkedParent  `protobuf:"bytes,10,req,name=GroupLinkedParent" json:"GroupLinkedParent,omitempty"`
	GroupIsDefaultSub    *GroupIsDefaultSub  `protobuf:"bytes,11,req,name=GroupIsDefaultSub" json:"GroupIsDefaultSub,omitempty"`
	GroupCreated         *float32            `protobuf:"fixed32,12,req,name=GroupCreated" json:"GroupCreated,omitempty"`
	ParticipantVersionID *string             `protobuf:"bytes,13,req,name=ParticipantVersionID" json:"ParticipantVersionID,omitempty"`
	Participants         []*GroupParticipant `protobuf:"bytes,14,rep,name=Participants" json:"Participants,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{20}
}

func (x *GroupInfo) GetOwnerJID() *JID {
	if x != nil {
		return x.OwnerJID
	}
	return nil
}

func (x *GroupInfo) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *GroupInfo) GetGroupName() *GroupName {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *GroupInfo) GetGroupTopic() *GroupTopic {
	if x != nil {
		return x.GroupTopic
	}
	return nil
}

func (x *GroupInfo) GetGroupLocked() *GroupLocked {
	if x != nil {
		return x.GroupLocked
	}
	return nil
}

func (x *GroupInfo) GetGroupAnnounce() *GroupAnnounce {
	if x != nil {
		return x.GroupAnnounce
	}
	return nil
}

func (x *GroupInfo) GetGroupEphemeral() *GroupEphemeral {
	if x != nil {
		return x.GroupEphemeral
	}
	return nil
}

func (x *GroupInfo) GetGroupIncognito() *GroupIncognito {
	if x != nil {
		return x.GroupIncognito
	}
	return nil
}

func (x *GroupInfo) GetGroupParent() *GroupParent {
	if x != nil {
		return x.GroupParent
	}
	return nil
}

func (x *GroupInfo) GetGroupLinkedParent() *GroupLinkedParent {
	if x != nil {
		return x.GroupLinkedParent
	}
	return nil
}

func (x *GroupInfo) GetGroupIsDefaultSub() *GroupIsDefaultSub {
	if x != nil {
		return x.GroupIsDefaultSub
	}
	return nil
}

func (x *GroupInfo) GetGroupCreated() float32 {
	if x != nil && x.GroupCreated != nil {
		return *x.GroupCreated
	}
	return 0
}

func (x *GroupInfo) GetParticipantVersionID() string {
	if x != nil && x.ParticipantVersionID != nil {
		return *x.ParticipantVersionID
	}
	return ""
}

func (x *GroupInfo) GetParticipants() []*GroupParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type MessageDebugTimings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue           *int64 `protobuf:"varint,1,req,name=Queue" json:"Queue,omitempty"`
	Marshal_        *int64 `protobuf:"varint,2,req,name=Marshal" json:"Marshal,omitempty"`
	GetParticipants *int64 `protobuf:"varint,3,req,name=GetParticipants" json:"GetParticipants,omitempty"`
	GetDevices      *int64 `protobuf:"varint,4,req,name=GetDevices" json:"GetDevices,omitempty"`
	GroupEncrypt    *int64 `protobuf:"varint,5,req,name=GroupEncrypt" json:"GroupEncrypt,omitempty"`
	PeerEncrypt     *int64 `protobuf:"varint,6,req,name=PeerEncrypt" json:"PeerEncrypt,omitempty"`
	Send            *int64 `protobuf:"varint,7,req,name=Send" json:"Send,omitempty"`
	Resp            *int64 `protobuf:"varint,8,req,name=Resp" json:"Resp,omitempty"`
	Retry           *int64 `protobuf:"varint,9,req,name=Retry" json:"Retry,omitempty"`
}

func (x *MessageDebugTimings) Reset() {
	*x = MessageDebugTimings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDebugTimings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDebugTimings) ProtoMessage() {}

func (x *MessageDebugTimings) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDebugTimings.ProtoReflect.Descriptor instead.
func (*MessageDebugTimings) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{21}
}

func (x *MessageDebugTimings) GetQueue() int64 {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return 0
}

func (x *MessageDebugTimings) GetMarshal_() int64 {
	if x != nil && x.Marshal_ != nil {
		return *x.Marshal_
	}
	return 0
}

func (x *MessageDebugTimings) GetGetParticipants() int64 {
	if x != nil && x.GetParticipants != nil {
		return *x.GetParticipants
	}
	return 0
}

func (x *MessageDebugTimings) GetGetDevices() int64 {
	if x != nil && x.GetDevices != nil {
		return *x.GetDevices
	}
	return 0
}

func (x *MessageDebugTimings) GetGroupEncrypt() int64 {
	if x != nil && x.GroupEncrypt != nil {
		return *x.GroupEncrypt
	}
	return 0
}

func (x *MessageDebugTimings) GetPeerEncrypt() int64 {
	if x != nil && x.PeerEncrypt != nil {
		return *x.PeerEncrypt
	}
	return 0
}

func (x *MessageDebugTimings) GetSend() int64 {
	if x != nil && x.Send != nil {
		return *x.Send
	}
	return 0
}

func (x *MessageDebugTimings) GetResp() int64 {
	if x != nil && x.Resp != nil {
		return *x.Resp
	}
	return 0
}

func (x *MessageDebugTimings) GetRetry() int64 {
	if x != nil && x.Retry != nil {
		return *x.Retry
	}
	return 0
}

type SendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    *int64               `protobuf:"varint,1,req,name=Timestamp" json:"Timestamp,omitempty"`
	ID           *string              `protobuf:"bytes,2,req,name=ID" json:"ID,omitempty"`
	ServerID     *int64               `protobuf:"varint,3,req,name=ServerID" json:"ServerID,omitempty"`
	DebugTimings *MessageDebugTimings `protobuf:"bytes,4,req,name=DebugTimings" json:"DebugTimings,omitempty"`
}

func (x *SendResponse) Reset() {
	*x = SendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponse) ProtoMessage() {}

func (x *SendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponse.ProtoReflect.Descriptor instead.
func (*SendResponse) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{22}
}

func (x *SendResponse) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *SendResponse) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *SendResponse) GetServerID() int64 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *SendResponse) GetDebugTimings() *MessageDebugTimings {
	if x != nil {
		return x.DebugTimings
	}
	return nil
}

type SendMessageReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *string       `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
	SendResponse *SendResponse `protobuf:"bytes,2,opt,name=SendResponse" json:"SendResponse,omitempty"`
}

func (x *SendMessageReturnFunction) Reset() {
	*x = SendMessageReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageReturnFunction) ProtoMessage() {}

func (x *SendMessageReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageReturnFunction.ProtoReflect.Descriptor instead.
func (*SendMessageReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{23}
}

func (x *SendMessageReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *SendMessageReturnFunction) GetSendResponse() *SendResponse {
	if x != nil {
		return x.SendResponse
	}
	return nil
}

// Function
type GetGroupInfoReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupInfo *GroupInfo `protobuf:"bytes,1,opt,name=GroupInfo" json:"GroupInfo,omitempty"`
	Error     *string    `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetGroupInfoReturnFunction) Reset() {
	*x = GetGroupInfoReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoReturnFunction) ProtoMessage() {}

func (x *GetGroupInfoReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoReturnFunction.ProtoReflect.Descriptor instead.
func (*GetGroupInfoReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{24}
}

func (x *GetGroupInfoReturnFunction) GetGroupInfo() *GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *GetGroupInfoReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type JoinGroupWithLinkReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *string `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
	Jid   *JID    `protobuf:"bytes,2,opt,name=Jid" json:"Jid,omitempty"`
}

func (x *JoinGroupWithLinkReturnFunction) Reset() {
	*x = JoinGroupWithLinkReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupWithLinkReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupWithLinkReturnFunction) ProtoMessage() {}

func (x *JoinGroupWithLinkReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupWithLinkReturnFunction.ProtoReflect.Descriptor instead.
func (*JoinGroupWithLinkReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{25}
}

func (x *JoinGroupWithLinkReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *JoinGroupWithLinkReturnFunction) GetJid() *JID {
	if x != nil {
		return x.Jid
	}
	return nil
}

type GetGroupInviteLinkReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteLink *string `protobuf:"bytes,1,opt,name=InviteLink" json:"InviteLink,omitempty"`
	Error      *string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetGroupInviteLinkReturnFunction) Reset() {
	*x = GetGroupInviteLinkReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInviteLinkReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInviteLinkReturnFunction) ProtoMessage() {}

func (x *GetGroupInviteLinkReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInviteLinkReturnFunction.ProtoReflect.Descriptor instead.
func (*GetGroupInviteLinkReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{26}
}

func (x *GetGroupInviteLinkReturnFunction) GetInviteLink() string {
	if x != nil && x.InviteLink != nil {
		return *x.InviteLink
	}
	return ""
}

func (x *GetGroupInviteLinkReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type DownloadReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binary []byte  `protobuf:"bytes,1,opt,name=Binary" json:"Binary,omitempty"`
	Error  *string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *DownloadReturnFunction) Reset() {
	*x = DownloadReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadReturnFunction) ProtoMessage() {}

func (x *DownloadReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadReturnFunction.ProtoReflect.Descriptor instead.
func (*DownloadReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{27}
}

func (x *DownloadReturnFunction) GetBinary() []byte {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *DownloadReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type UploadReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadResponse *UploadResponse `protobuf:"bytes,1,opt,name=UploadResponse" json:"UploadResponse,omitempty"`
	Error          *string         `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *UploadReturnFunction) Reset() {
	*x = UploadReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadReturnFunction) ProtoMessage() {}

func (x *UploadReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadReturnFunction.ProtoReflect.Descriptor instead.
func (*UploadReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{28}
}

func (x *UploadReturnFunction) GetUploadResponse() *UploadResponse {
	if x != nil {
		return x.UploadResponse
	}
	return nil
}

func (x *UploadReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type SetGroupPhotoReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureID *string `protobuf:"bytes,1,req,name=PictureID" json:"PictureID,omitempty"`
	Error     *string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *SetGroupPhotoReturnFunction) Reset() {
	*x = SetGroupPhotoReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupPhotoReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupPhotoReturnFunction) ProtoMessage() {}

func (x *SetGroupPhotoReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupPhotoReturnFunction.ProtoReflect.Descriptor instead.
func (*SetGroupPhotoReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{29}
}

func (x *SetGroupPhotoReturnFunction) GetPictureID() string {
	if x != nil && x.PictureID != nil {
		return *x.PictureID
	}
	return ""
}

func (x *SetGroupPhotoReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type IsOnWhatsAppReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOnWhatsAppResponse []*IsOnWhatsAppResponse `protobuf:"bytes,1,rep,name=IsOnWhatsAppResponse" json:"IsOnWhatsAppResponse,omitempty"`
	Error                *string                 `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *IsOnWhatsAppReturnFunction) Reset() {
	*x = IsOnWhatsAppReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOnWhatsAppReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOnWhatsAppReturnFunction) ProtoMessage() {}

func (x *IsOnWhatsAppReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOnWhatsAppReturnFunction.ProtoReflect.Descriptor instead.
func (*IsOnWhatsAppReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{30}
}

func (x *IsOnWhatsAppReturnFunction) GetIsOnWhatsAppResponse() []*IsOnWhatsAppResponse {
	if x != nil {
		return x.IsOnWhatsAppResponse
	}
	return nil
}

func (x *IsOnWhatsAppReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GetUserInfoSingleReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID      *JID      `protobuf:"bytes,1,opt,name=JID" json:"JID,omitempty"`
	UserInfo *UserInfo `protobuf:"bytes,2,opt,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *GetUserInfoSingleReturnFunction) Reset() {
	*x = GetUserInfoSingleReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoSingleReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoSingleReturnFunction) ProtoMessage() {}

func (x *GetUserInfoSingleReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoSingleReturnFunction.ProtoReflect.Descriptor instead.
func (*GetUserInfoSingleReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{31}
}

func (x *GetUserInfoSingleReturnFunction) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *GetUserInfoSingleReturnFunction) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type GetUserInfoReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsersInfo []*GetUserInfoSingleReturnFunction `protobuf:"bytes,1,rep,name=UsersInfo" json:"UsersInfo,omitempty"`
	Error     *string                            `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetUserInfoReturnFunction) Reset() {
	*x = GetUserInfoReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoReturnFunction) ProtoMessage() {}

func (x *GetUserInfoReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoReturnFunction.ProtoReflect.Descriptor instead.
func (*GetUserInfoReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{32}
}

func (x *GetUserInfoReturnFunction) GetUsersInfo() []*GetUserInfoSingleReturnFunction {
	if x != nil {
		return x.UsersInfo
	}
	return nil
}

func (x *GetUserInfoReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type BuildPollVoteReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PollVote *waE2E.Message `protobuf:"bytes,1,opt,name=PollVote" json:"PollVote,omitempty"`
	Error    *string        `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *BuildPollVoteReturnFunction) Reset() {
	*x = BuildPollVoteReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildPollVoteReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildPollVoteReturnFunction) ProtoMessage() {}

func (x *BuildPollVoteReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildPollVoteReturnFunction.ProtoReflect.Descriptor instead.
func (*BuildPollVoteReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{33}
}

func (x *BuildPollVoteReturnFunction) GetPollVote() *waE2E.Message {
	if x != nil {
		return x.PollVote
	}
	return nil
}

func (x *BuildPollVoteReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type CreateNewsLetterReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterMetadata *NewsletterMetadata `protobuf:"bytes,1,opt,name=NewsletterMetadata" json:"NewsletterMetadata,omitempty"`
	Error              *string             `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *CreateNewsLetterReturnFunction) Reset() {
	*x = CreateNewsLetterReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewsLetterReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewsLetterReturnFunction) ProtoMessage() {}

func (x *CreateNewsLetterReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewsLetterReturnFunction.ProtoReflect.Descriptor instead.
func (*CreateNewsLetterReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{34}
}

func (x *CreateNewsLetterReturnFunction) GetNewsletterMetadata() *NewsletterMetadata {
	if x != nil {
		return x.NewsletterMetadata
	}
	return nil
}

func (x *CreateNewsLetterReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GetBlocklistReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocklist *Blocklist `protobuf:"bytes,1,opt,name=Blocklist" json:"Blocklist,omitempty"`
	Error     *string    `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetBlocklistReturnFunction) Reset() {
	*x = GetBlocklistReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocklistReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocklistReturnFunction) ProtoMessage() {}

func (x *GetBlocklistReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocklistReturnFunction.ProtoReflect.Descriptor instead.
func (*GetBlocklistReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{35}
}

func (x *GetBlocklistReturnFunction) GetBlocklist() *Blocklist {
	if x != nil {
		return x.Blocklist
	}
	return nil
}

func (x *GetBlocklistReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GetContactQRLinkReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link  *string `protobuf:"bytes,1,req,name=Link" json:"Link,omitempty"`
	Error *string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetContactQRLinkReturnFunction) Reset() {
	*x = GetContactQRLinkReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactQRLinkReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactQRLinkReturnFunction) ProtoMessage() {}

func (x *GetContactQRLinkReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactQRLinkReturnFunction.ProtoReflect.Descriptor instead.
func (*GetContactQRLinkReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{36}
}

func (x *GetContactQRLinkReturnFunction) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *GetContactQRLinkReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GetGroupRequestParticipantsReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participants []*JID  `protobuf:"bytes,1,rep,name=Participants" json:"Participants,omitempty"`
	Error        *string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetGroupRequestParticipantsReturnFunction) Reset() {
	*x = GetGroupRequestParticipantsReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupRequestParticipantsReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupRequestParticipantsReturnFunction) ProtoMessage() {}

func (x *GetGroupRequestParticipantsReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupRequestParticipantsReturnFunction.ProtoReflect.Descriptor instead.
func (*GetGroupRequestParticipantsReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{37}
}

func (x *GetGroupRequestParticipantsReturnFunction) GetParticipants() []*JID {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *GetGroupRequestParticipantsReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GetJoinedGroupsReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group []*GroupInfo `protobuf:"bytes,1,rep,name=Group" json:"Group,omitempty"`
	Error *string      `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetJoinedGroupsReturnFunction) Reset() {
	*x = GetJoinedGroupsReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinedGroupsReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedGroupsReturnFunction) ProtoMessage() {}

func (x *GetJoinedGroupsReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedGroupsReturnFunction.ProtoReflect.Descriptor instead.
func (*GetJoinedGroupsReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{38}
}

func (x *GetJoinedGroupsReturnFunction) GetGroup() []*GroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GetJoinedGroupsReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type ReqCreateGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *string            `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Participants      []*JID             `protobuf:"bytes,2,rep,name=Participants" json:"Participants,omitempty"`
	CreateKey         *string            `protobuf:"bytes,3,req,name=CreateKey" json:"CreateKey,omitempty"`
	GroupParent       *GroupParent       `protobuf:"bytes,4,opt,name=GroupParent" json:"GroupParent,omitempty"`
	GroupLinkedParent *GroupLinkedParent `protobuf:"bytes,5,opt,name=GroupLinkedParent" json:"GroupLinkedParent,omitempty"`
}

func (x *ReqCreateGroup) Reset() {
	*x = ReqCreateGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateGroup) ProtoMessage() {}

func (x *ReqCreateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateGroup.ProtoReflect.Descriptor instead.
func (*ReqCreateGroup) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{39}
}

func (x *ReqCreateGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ReqCreateGroup) GetParticipants() []*JID {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ReqCreateGroup) GetCreateKey() string {
	if x != nil && x.CreateKey != nil {
		return *x.CreateKey
	}
	return ""
}

func (x *ReqCreateGroup) GetGroupParent() *GroupParent {
	if x != nil {
		return x.GroupParent
	}
	return nil
}

func (x *ReqCreateGroup) GetGroupLinkedParent() *GroupLinkedParent {
	if x != nil {
		return x.GroupLinkedParent
	}
	return nil
}

type JIDArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JIDS []*JID `protobuf:"bytes,1,rep,name=JIDS" json:"JIDS,omitempty"`
}

func (x *JIDArray) Reset() {
	*x = JIDArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JIDArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JIDArray) ProtoMessage() {}

func (x *JIDArray) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JIDArray.ProtoReflect.Descriptor instead.
func (*JIDArray) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{40}
}

func (x *JIDArray) GetJIDS() []*JID {
	if x != nil {
		return x.JIDS
	}
	return nil
}

type ArrayString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (x *ArrayString) Reset() {
	*x = ArrayString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayString) ProtoMessage() {}

func (x *ArrayString) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayString.ProtoReflect.Descriptor instead.
func (*ArrayString) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{41}
}

func (x *ArrayString) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewsLetterMessageMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditTS     *int64 `protobuf:"varint,1,req,name=EditTS" json:"EditTS,omitempty"`
	OriginalTS *int64 `protobuf:"varint,2,req,name=OriginalTS" json:"OriginalTS,omitempty"`
}

func (x *NewsLetterMessageMeta) Reset() {
	*x = NewsLetterMessageMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsLetterMessageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsLetterMessageMeta) ProtoMessage() {}

func (x *NewsLetterMessageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsLetterMessageMeta.ProtoReflect.Descriptor instead.
func (*NewsLetterMessageMeta) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{42}
}

func (x *NewsLetterMessageMeta) GetEditTS() int64 {
	if x != nil && x.EditTS != nil {
		return *x.EditTS
	}
	return 0
}

func (x *NewsLetterMessageMeta) GetOriginalTS() int64 {
	if x != nil && x.OriginalTS != nil {
		return *x.OriginalTS
	}
	return 0
}

type GroupDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted       *bool   `protobuf:"varint,1,req,name=Deleted" json:"Deleted,omitempty"`
	DeletedReason *string `protobuf:"bytes,2,req,name=DeletedReason" json:"DeletedReason,omitempty"`
}

func (x *GroupDelete) Reset() {
	*x = GroupDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDelete) ProtoMessage() {}

func (x *GroupDelete) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDelete.ProtoReflect.Descriptor instead.
func (*GroupDelete) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{43}
}

func (x *GroupDelete) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *GroupDelete) GetDeletedReason() string {
	if x != nil && x.DeletedReason != nil {
		return *x.DeletedReason
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info                  *MessageInfo           `protobuf:"bytes,1,req,name=Info" json:"Info,omitempty"`
	Message               *waE2E.Message         `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	IsEphemeral           *bool                  `protobuf:"varint,3,req,name=IsEphemeral" json:"IsEphemeral,omitempty"`
	IsViewOnce            *bool                  `protobuf:"varint,4,req,name=IsViewOnce" json:"IsViewOnce,omitempty"`
	IsViewOnceV2          *bool                  `protobuf:"varint,5,req,name=IsViewOnceV2" json:"IsViewOnceV2,omitempty"`
	IsViewOnceV2Extension *bool                  `protobuf:"varint,6,req,name=IsViewOnceV2Extension" json:"IsViewOnceV2Extension,omitempty"`
	IsDocumentWithCaption *bool                  `protobuf:"varint,7,req,name=IsDocumentWithCaption" json:"IsDocumentWithCaption,omitempty"`
	IsLottieSticker       *bool                  `protobuf:"varint,8,req,name=IsLottieSticker" json:"IsLottieSticker,omitempty"`
	IsEdit                *bool                  `protobuf:"varint,9,req,name=IsEdit" json:"IsEdit,omitempty"`
	SourceWebMsg          *waWeb.WebMessageInfo  `protobuf:"bytes,10,opt,name=SourceWebMsg" json:"SourceWebMsg,omitempty"`
	UnavailableRequestID  *string                `protobuf:"bytes,11,req,name=UnavailableRequestID" json:"UnavailableRequestID,omitempty"`
	RetryCount            *int64                 `protobuf:"varint,12,req,name=RetryCount" json:"RetryCount,omitempty"`
	NewsLetterMeta        *NewsLetterMessageMeta `protobuf:"bytes,13,opt,name=NewsLetterMeta" json:"NewsLetterMeta,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{44}
}

func (x *Message) GetInfo() *MessageInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Message) GetMessage() *waE2E.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Message) GetIsEphemeral() bool {
	if x != nil && x.IsEphemeral != nil {
		return *x.IsEphemeral
	}
	return false
}

func (x *Message) GetIsViewOnce() bool {
	if x != nil && x.IsViewOnce != nil {
		return *x.IsViewOnce
	}
	return false
}

func (x *Message) GetIsViewOnceV2() bool {
	if x != nil && x.IsViewOnceV2 != nil {
		return *x.IsViewOnceV2
	}
	return false
}

func (x *Message) GetIsViewOnceV2Extension() bool {
	if x != nil && x.IsViewOnceV2Extension != nil {
		return *x.IsViewOnceV2Extension
	}
	return false
}

func (x *Message) GetIsDocumentWithCaption() bool {
	if x != nil && x.IsDocumentWithCaption != nil {
		return *x.IsDocumentWithCaption
	}
	return false
}

func (x *Message) GetIsLottieSticker() bool {
	if x != nil && x.IsLottieSticker != nil {
		return *x.IsLottieSticker
	}
	return false
}

func (x *Message) GetIsEdit() bool {
	if x != nil && x.IsEdit != nil {
		return *x.IsEdit
	}
	return false
}

func (x *Message) GetSourceWebMsg() *waWeb.WebMessageInfo {
	if x != nil {
		return x.SourceWebMsg
	}
	return nil
}

func (x *Message) GetUnavailableRequestID() string {
	if x != nil && x.UnavailableRequestID != nil {
		return *x.UnavailableRequestID
	}
	return ""
}

func (x *Message) GetRetryCount() int64 {
	if x != nil && x.RetryCount != nil {
		return *x.RetryCount
	}
	return 0
}

func (x *Message) GetNewsLetterMeta() *NewsLetterMessageMeta {
	if x != nil {
		return x.NewsLetterMeta
	}
	return nil
}

type CreateNewsletterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	Description *string `protobuf:"bytes,2,req,name=Description" json:"Description,omitempty"`
	Picture     []byte  `protobuf:"bytes,3,req,name=Picture" json:"Picture,omitempty"`
}

func (x *CreateNewsletterParams) Reset() {
	*x = CreateNewsletterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewsletterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewsletterParams) ProtoMessage() {}

func (x *CreateNewsletterParams) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewsletterParams.ProtoReflect.Descriptor instead.
func (*CreateNewsletterParams) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{45}
}

func (x *CreateNewsletterParams) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateNewsletterParams) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateNewsletterParams) GetPicture() []byte {
	if x != nil {
		return x.Picture
	}
	return nil
}

type WrappedNewsletterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *WrappedNewsletterState_NewsletterState `protobuf:"varint,1,req,name=Type,enum=snakechat.WrappedNewsletterState_NewsletterState" json:"Type,omitempty"`
}

func (x *WrappedNewsletterState) Reset() {
	*x = WrappedNewsletterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrappedNewsletterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrappedNewsletterState) ProtoMessage() {}

func (x *WrappedNewsletterState) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrappedNewsletterState.ProtoReflect.Descriptor instead.
func (*WrappedNewsletterState) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{46}
}

func (x *WrappedNewsletterState) GetType() WrappedNewsletterState_NewsletterState {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return WrappedNewsletterState_ACTIVE
}

type NewsletterText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       *string `protobuf:"bytes,1,req,name=Text" json:"Text,omitempty"`
	ID         *string `protobuf:"bytes,2,req,name=ID" json:"ID,omitempty"`
	UpdateTime *int64  `protobuf:"varint,3,req,name=UpdateTime" json:"UpdateTime,omitempty"`
}

func (x *NewsletterText) Reset() {
	*x = NewsletterText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterText) ProtoMessage() {}

func (x *NewsletterText) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterText.ProtoReflect.Descriptor instead.
func (*NewsletterText) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{47}
}

func (x *NewsletterText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *NewsletterText) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *NewsletterText) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

type ProfilePictureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL        *string `protobuf:"bytes,1,req,name=URL" json:"URL,omitempty"`
	ID         *string `protobuf:"bytes,2,req,name=ID" json:"ID,omitempty"`
	Type       *string `protobuf:"bytes,3,req,name=Type" json:"Type,omitempty"`
	DirectPath *string `protobuf:"bytes,4,req,name=DirectPath" json:"DirectPath,omitempty"`
}

func (x *ProfilePictureInfo) Reset() {
	*x = ProfilePictureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePictureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePictureInfo) ProtoMessage() {}

func (x *ProfilePictureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePictureInfo.ProtoReflect.Descriptor instead.
func (*ProfilePictureInfo) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{48}
}

func (x *ProfilePictureInfo) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *ProfilePictureInfo) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *ProfilePictureInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ProfilePictureInfo) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

type NewsletterReactionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *NewsletterReactionSettings_NewsletterReactionsMode `protobuf:"varint,1,req,name=Value,enum=snakechat.NewsletterReactionSettings_NewsletterReactionsMode" json:"Value,omitempty"`
}

func (x *NewsletterReactionSettings) Reset() {
	*x = NewsletterReactionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterReactionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterReactionSettings) ProtoMessage() {}

func (x *NewsletterReactionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterReactionSettings.ProtoReflect.Descriptor instead.
func (*NewsletterReactionSettings) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{49}
}

func (x *NewsletterReactionSettings) GetValue() NewsletterReactionSettings_NewsletterReactionsMode {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return NewsletterReactionSettings_ALL
}

type NewsletterSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReactionCodes *NewsletterReactionSettings `protobuf:"bytes,1,req,name=ReactionCodes" json:"ReactionCodes,omitempty"`
}

func (x *NewsletterSetting) Reset() {
	*x = NewsletterSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterSetting) ProtoMessage() {}

func (x *NewsletterSetting) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterSetting.ProtoReflect.Descriptor instead.
func (*NewsletterSetting) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{50}
}

func (x *NewsletterSetting) GetReactionCodes() *NewsletterReactionSettings {
	if x != nil {
		return x.ReactionCodes
	}
	return nil
}

type NewsletterThreadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationTime      *int64                                                `protobuf:"varint,1,req,name=CreationTime" json:"CreationTime,omitempty"`
	InviteCode        *string                                               `protobuf:"bytes,2,req,name=InviteCode" json:"InviteCode,omitempty"`
	Name              *NewsletterText                                       `protobuf:"bytes,3,req,name=Name" json:"Name,omitempty"`
	Description       *NewsletterText                                       `protobuf:"bytes,4,req,name=Description" json:"Description,omitempty"`
	SubscriberCount   *int64                                                `protobuf:"varint,5,req,name=SubscriberCount" json:"SubscriberCount,omitempty"`
	VerificationState *NewsletterThreadMetadata_NewsletterVerificationState `protobuf:"varint,6,req,name=VerificationState,enum=snakechat.NewsletterThreadMetadata_NewsletterVerificationState" json:"VerificationState,omitempty"`
	Picture           *ProfilePictureInfo                                   `protobuf:"bytes,7,opt,name=Picture" json:"Picture,omitempty"`
	Preview           *ProfilePictureInfo                                   `protobuf:"bytes,8,req,name=Preview" json:"Preview,omitempty"`
	Settings          *NewsletterSetting                                    `protobuf:"bytes,9,req,name=Settings" json:"Settings,omitempty"`
}

func (x *NewsletterThreadMetadata) Reset() {
	*x = NewsletterThreadMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterThreadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterThreadMetadata) ProtoMessage() {}

func (x *NewsletterThreadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterThreadMetadata.ProtoReflect.Descriptor instead.
func (*NewsletterThreadMetadata) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{51}
}

func (x *NewsletterThreadMetadata) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *NewsletterThreadMetadata) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

func (x *NewsletterThreadMetadata) GetName() *NewsletterText {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NewsletterThreadMetadata) GetDescription() *NewsletterText {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *NewsletterThreadMetadata) GetSubscriberCount() int64 {
	if x != nil && x.SubscriberCount != nil {
		return *x.SubscriberCount
	}
	return 0
}

func (x *NewsletterThreadMetadata) GetVerificationState() NewsletterThreadMetadata_NewsletterVerificationState {
	if x != nil && x.VerificationState != nil {
		return *x.VerificationState
	}
	return NewsletterThreadMetadata_VERIFIED
}

func (x *NewsletterThreadMetadata) GetPicture() *ProfilePictureInfo {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *NewsletterThreadMetadata) GetPreview() *ProfilePictureInfo {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *NewsletterThreadMetadata) GetSettings() *NewsletterSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type NewsletterViewerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mute *NewsletterMuteState `protobuf:"varint,1,req,name=Mute,enum=snakechat.NewsletterMuteState" json:"Mute,omitempty"`
	Role *NewsletterRole      `protobuf:"varint,2,req,name=Role,enum=snakechat.NewsletterRole" json:"Role,omitempty"`
}

func (x *NewsletterViewerMetadata) Reset() {
	*x = NewsletterViewerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterViewerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterViewerMetadata) ProtoMessage() {}

func (x *NewsletterViewerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterViewerMetadata.ProtoReflect.Descriptor instead.
func (*NewsletterViewerMetadata) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{52}
}

func (x *NewsletterViewerMetadata) GetMute() NewsletterMuteState {
	if x != nil && x.Mute != nil {
		return *x.Mute
	}
	return NewsletterMuteState_ON
}

func (x *NewsletterViewerMetadata) GetRole() NewsletterRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return NewsletterRole_SUBSCRIBER
}

type NewsletterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *JID                      `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	State      *WrappedNewsletterState   `protobuf:"bytes,2,req,name=State" json:"State,omitempty"`
	ThreadMeta *NewsletterThreadMetadata `protobuf:"bytes,3,req,name=ThreadMeta" json:"ThreadMeta,omitempty"`
	ViewerMeta *NewsletterViewerMetadata `protobuf:"bytes,4,opt,name=ViewerMeta" json:"ViewerMeta,omitempty"`
}

func (x *NewsletterMetadata) Reset() {
	*x = NewsletterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterMetadata) ProtoMessage() {}

func (x *NewsletterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterMetadata.ProtoReflect.Descriptor instead.
func (*NewsletterMetadata) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{53}
}

func (x *NewsletterMetadata) GetID() *JID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *NewsletterMetadata) GetState() *WrappedNewsletterState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NewsletterMetadata) GetThreadMeta() *NewsletterThreadMetadata {
	if x != nil {
		return x.ThreadMeta
	}
	return nil
}

func (x *NewsletterMetadata) GetViewerMeta() *NewsletterViewerMetadata {
	if x != nil {
		return x.ViewerMeta
	}
	return nil
}

type Blocklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DHash *string `protobuf:"bytes,1,req,name=DHash" json:"DHash,omitempty"`
	JIDs  []*JID  `protobuf:"bytes,2,rep,name=JIDs" json:"JIDs,omitempty"`
}

func (x *Blocklist) Reset() {
	*x = Blocklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blocklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blocklist) ProtoMessage() {}

func (x *Blocklist) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blocklist.ProtoReflect.Descriptor instead.
func (*Blocklist) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{54}
}

func (x *Blocklist) GetDHash() string {
	if x != nil && x.DHash != nil {
		return *x.DHash
	}
	return ""
}

func (x *Blocklist) GetJIDs() []*JID {
	if x != nil {
		return x.JIDs
	}
	return nil
}

type Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Count *int64  `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
}

func (x *Reaction) Reset() {
	*x = Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reaction) ProtoMessage() {}

func (x *Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reaction.ProtoReflect.Descriptor instead.
func (*Reaction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{55}
}

func (x *Reaction) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Reaction) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type NewsletterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageServerID *int64         `protobuf:"varint,1,req,name=MessageServerID" json:"MessageServerID,omitempty"`
	ViewsCount      *int64         `protobuf:"varint,2,req,name=ViewsCount" json:"ViewsCount,omitempty"`
	ReactionCounts  []*Reaction    `protobuf:"bytes,3,rep,name=ReactionCounts" json:"ReactionCounts,omitempty"`
	Message         *waE2E.Message `protobuf:"bytes,4,req,name=Message" json:"Message,omitempty"`
}

func (x *NewsletterMessage) Reset() {
	*x = NewsletterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterMessage) ProtoMessage() {}

func (x *NewsletterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterMessage.ProtoReflect.Descriptor instead.
func (*NewsletterMessage) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{56}
}

func (x *NewsletterMessage) GetMessageServerID() int64 {
	if x != nil && x.MessageServerID != nil {
		return *x.MessageServerID
	}
	return 0
}

func (x *NewsletterMessage) GetViewsCount() int64 {
	if x != nil && x.ViewsCount != nil {
		return *x.ViewsCount
	}
	return 0
}

func (x *NewsletterMessage) GetReactionCounts() []*Reaction {
	if x != nil {
		return x.ReactionCounts
	}
	return nil
}

func (x *NewsletterMessage) GetMessage() *waE2E.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type GetNewsletterMessageUpdateReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterMessage []*NewsletterMessage `protobuf:"bytes,1,rep,name=NewsletterMessage" json:"NewsletterMessage,omitempty"`
	Error             *string              `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetNewsletterMessageUpdateReturnFunction) Reset() {
	*x = GetNewsletterMessageUpdateReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsletterMessageUpdateReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsletterMessageUpdateReturnFunction) ProtoMessage() {}

func (x *GetNewsletterMessageUpdateReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsletterMessageUpdateReturnFunction.ProtoReflect.Descriptor instead.
func (*GetNewsletterMessageUpdateReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{57}
}

func (x *GetNewsletterMessageUpdateReturnFunction) GetNewsletterMessage() []*NewsletterMessage {
	if x != nil {
		return x.NewsletterMessage
	}
	return nil
}

func (x *GetNewsletterMessageUpdateReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type PrivacySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupAdd     *PrivacySettings_PrivacySetting `protobuf:"varint,1,req,name=GroupAdd,enum=snakechat.PrivacySettings_PrivacySetting" json:"GroupAdd,omitempty"`
	LastSeen     *PrivacySettings_PrivacySetting `protobuf:"varint,2,req,name=LastSeen,enum=snakechat.PrivacySettings_PrivacySetting" json:"LastSeen,omitempty"`
	Status       *PrivacySettings_PrivacySetting `protobuf:"varint,3,req,name=Status,enum=snakechat.PrivacySettings_PrivacySetting" json:"Status,omitempty"`
	Profile      *PrivacySettings_PrivacySetting `protobuf:"varint,4,req,name=Profile,enum=snakechat.PrivacySettings_PrivacySetting" json:"Profile,omitempty"`
	ReadReceipts *PrivacySettings_PrivacySetting `protobuf:"varint,5,req,name=ReadReceipts,enum=snakechat.PrivacySettings_PrivacySetting" json:"ReadReceipts,omitempty"`
	CallAdd      *PrivacySettings_PrivacySetting `protobuf:"varint,6,req,name=CallAdd,enum=snakechat.PrivacySettings_PrivacySetting" json:"CallAdd,omitempty"`
	Online       *PrivacySettings_PrivacySetting `protobuf:"varint,7,req,name=Online,enum=snakechat.PrivacySettings_PrivacySetting" json:"Online,omitempty"`
}

func (x *PrivacySettings) Reset() {
	*x = PrivacySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivacySettings) ProtoMessage() {}

func (x *PrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivacySettings.ProtoReflect.Descriptor instead.
func (*PrivacySettings) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{58}
}

func (x *PrivacySettings) GetGroupAdd() PrivacySettings_PrivacySetting {
	if x != nil && x.GroupAdd != nil {
		return *x.GroupAdd
	}
	return PrivacySettings_UNDEFINED
}

func (x *PrivacySettings) GetLastSeen() PrivacySettings_PrivacySetting {
	if x != nil && x.LastSeen != nil {
		return *x.LastSeen
	}
	return PrivacySettings_UNDEFINED
}

func (x *PrivacySettings) GetStatus() PrivacySettings_PrivacySetting {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return PrivacySettings_UNDEFINED
}

func (x *PrivacySettings) GetProfile() PrivacySettings_PrivacySetting {
	if x != nil && x.Profile != nil {
		return *x.Profile
	}
	return PrivacySettings_UNDEFINED
}

func (x *PrivacySettings) GetReadReceipts() PrivacySettings_PrivacySetting {
	if x != nil && x.ReadReceipts != nil {
		return *x.ReadReceipts
	}
	return PrivacySettings_UNDEFINED
}

func (x *PrivacySettings) GetCallAdd() PrivacySettings_PrivacySetting {
	if x != nil && x.CallAdd != nil {
		return *x.CallAdd
	}
	return PrivacySettings_UNDEFINED
}

func (x *PrivacySettings) GetOnline() PrivacySettings_PrivacySetting {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return PrivacySettings_UNDEFINED
}

type NodeAttrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*NodeAttrs_Boolean
	//	*NodeAttrs_Integer
	//	*NodeAttrs_Text
	//	*NodeAttrs_Jid
	Value isNodeAttrs_Value `protobuf_oneof:"Value"`
}

func (x *NodeAttrs) Reset() {
	*x = NodeAttrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAttrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAttrs) ProtoMessage() {}

func (x *NodeAttrs) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAttrs.ProtoReflect.Descriptor instead.
func (*NodeAttrs) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{59}
}

func (x *NodeAttrs) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (m *NodeAttrs) GetValue() isNodeAttrs_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NodeAttrs) GetBoolean() bool {
	if x, ok := x.GetValue().(*NodeAttrs_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *NodeAttrs) GetInteger() int64 {
	if x, ok := x.GetValue().(*NodeAttrs_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *NodeAttrs) GetText() string {
	if x, ok := x.GetValue().(*NodeAttrs_Text); ok {
		return x.Text
	}
	return ""
}

func (x *NodeAttrs) GetJid() *JID {
	if x, ok := x.GetValue().(*NodeAttrs_Jid); ok {
		return x.Jid
	}
	return nil
}

type isNodeAttrs_Value interface {
	isNodeAttrs_Value()
}

type NodeAttrs_Boolean struct {
	Boolean bool `protobuf:"varint,2,opt,name=boolean,oneof"`
}

type NodeAttrs_Integer struct {
	Integer int64 `protobuf:"varint,3,opt,name=integer,oneof"`
}

type NodeAttrs_Text struct {
	Text string `protobuf:"bytes,4,opt,name=text,oneof"`
}

type NodeAttrs_Jid struct {
	Jid *JID `protobuf:"bytes,5,opt,name=jid,oneof"`
}

func (*NodeAttrs_Boolean) isNodeAttrs_Value() {}

func (*NodeAttrs_Integer) isNodeAttrs_Value() {}

func (*NodeAttrs_Text) isNodeAttrs_Value() {}

func (*NodeAttrs_Jid) isNodeAttrs_Value() {}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag   *string      `protobuf:"bytes,1,req,name=Tag" json:"Tag,omitempty"`
	Attrs []*NodeAttrs `protobuf:"bytes,2,rep,name=Attrs" json:"Attrs,omitempty"`
	Nodes []*Node      `protobuf:"bytes,3,rep,name=Nodes" json:"Nodes,omitempty"`
	Nil   *bool        `protobuf:"varint,4,opt,name=Nil,def=0" json:"Nil,omitempty"`
	Bytes []byte       `protobuf:"bytes,5,opt,name=Bytes" json:"Bytes,omitempty"`
}

// Default values for Node fields.
const (
	Default_Node_Nil = bool(false)
)

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{60}
}

func (x *Node) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *Node) GetAttrs() []*NodeAttrs {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *Node) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Node) GetNil() bool {
	if x != nil && x.Nil != nil {
		return *x.Nil
	}
	return Default_Node_Nil
}

func (x *Node) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type InfoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *string `protobuf:"bytes,1,req,name=Namespace" json:"Namespace,omitempty"`
	Type      *string `protobuf:"bytes,2,req,name=Type" json:"Type,omitempty"`
	To        *string `protobuf:"bytes,3,req,name=To" json:"To,omitempty"`
	Content   []*Node `protobuf:"bytes,4,rep,name=Content" json:"Content,omitempty"`
}

func (x *InfoQuery) Reset() {
	*x = InfoQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoQuery) ProtoMessage() {}

func (x *InfoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoQuery.ProtoReflect.Descriptor instead.
func (*InfoQuery) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{61}
}

func (x *InfoQuery) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *InfoQuery) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *InfoQuery) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *InfoQuery) GetContent() []*Node {
	if x != nil {
		return x.Content
	}
	return nil
}

type GetProfilePictureParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preview     *bool   `protobuf:"varint,1,opt,name=Preview" json:"Preview,omitempty"`
	ExistingID  *string `protobuf:"bytes,2,opt,name=ExistingID" json:"ExistingID,omitempty"`
	IsCommunity *bool   `protobuf:"varint,3,opt,name=IsCommunity" json:"IsCommunity,omitempty"`
}

func (x *GetProfilePictureParams) Reset() {
	*x = GetProfilePictureParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfilePictureParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfilePictureParams) ProtoMessage() {}

func (x *GetProfilePictureParams) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfilePictureParams.ProtoReflect.Descriptor instead.
func (*GetProfilePictureParams) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{62}
}

func (x *GetProfilePictureParams) GetPreview() bool {
	if x != nil && x.Preview != nil {
		return *x.Preview
	}
	return false
}

func (x *GetProfilePictureParams) GetExistingID() string {
	if x != nil && x.ExistingID != nil {
		return *x.ExistingID
	}
	return ""
}

func (x *GetProfilePictureParams) GetIsCommunity() bool {
	if x != nil && x.IsCommunity != nil {
		return *x.IsCommunity
	}
	return false
}

type GetProfilePictureReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Picture *ProfilePictureInfo `protobuf:"bytes,1,opt,name=Picture" json:"Picture,omitempty"`
	Error   *string             `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetProfilePictureReturnFunction) Reset() {
	*x = GetProfilePictureReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfilePictureReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfilePictureReturnFunction) ProtoMessage() {}

func (x *GetProfilePictureReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfilePictureReturnFunction.ProtoReflect.Descriptor instead.
func (*GetProfilePictureReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{63}
}

func (x *GetProfilePictureReturnFunction) GetPicture() *ProfilePictureInfo {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *GetProfilePictureReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type StatusPrivacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *StatusPrivacy_StatusPrivacyType `protobuf:"varint,1,req,name=Type,enum=snakechat.StatusPrivacy_StatusPrivacyType" json:"Type,omitempty"`
	List      []*JID                           `protobuf:"bytes,2,rep,name=List" json:"List,omitempty"`
	IsDefault *bool                            `protobuf:"varint,3,req,name=IsDefault" json:"IsDefault,omitempty"`
}

func (x *StatusPrivacy) Reset() {
	*x = StatusPrivacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusPrivacy) ProtoMessage() {}

func (x *StatusPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusPrivacy.ProtoReflect.Descriptor instead.
func (*StatusPrivacy) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{64}
}

func (x *StatusPrivacy) GetType() StatusPrivacy_StatusPrivacyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return StatusPrivacy_CONTACTS
}

func (x *StatusPrivacy) GetList() []*JID {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *StatusPrivacy) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

type GetStatusPrivacyReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusPrivacy []*StatusPrivacy `protobuf:"bytes,1,rep,name=StatusPrivacy" json:"StatusPrivacy,omitempty"`
	Error         *string          `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetStatusPrivacyReturnFunction) Reset() {
	*x = GetStatusPrivacyReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusPrivacyReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusPrivacyReturnFunction) ProtoMessage() {}

func (x *GetStatusPrivacyReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusPrivacyReturnFunction.ProtoReflect.Descriptor instead.
func (*GetStatusPrivacyReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{65}
}

func (x *GetStatusPrivacyReturnFunction) GetStatusPrivacy() []*StatusPrivacy {
	if x != nil {
		return x.StatusPrivacy
	}
	return nil
}

func (x *GetStatusPrivacyReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GroupLinkTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID               *JID               `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	GroupName         *GroupName         `protobuf:"bytes,2,req,name=GroupName" json:"GroupName,omitempty"`
	GroupIsDefaultSub *GroupIsDefaultSub `protobuf:"bytes,3,req,name=GroupIsDefaultSub" json:"GroupIsDefaultSub,omitempty"`
}

func (x *GroupLinkTarget) Reset() {
	*x = GroupLinkTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLinkTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLinkTarget) ProtoMessage() {}

func (x *GroupLinkTarget) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLinkTarget.ProtoReflect.Descriptor instead.
func (*GroupLinkTarget) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{66}
}

func (x *GroupLinkTarget) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *GroupLinkTarget) GetGroupName() *GroupName {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *GroupLinkTarget) GetGroupIsDefaultSub() *GroupIsDefaultSub {
	if x != nil {
		return x.GroupIsDefaultSub
	}
	return nil
}

type GroupLinkChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *GroupLinkChange_ChangeType `protobuf:"varint,1,req,name=Type,enum=snakechat.GroupLinkChange_ChangeType" json:"Type,omitempty"`
	UnlinkReason *string                     `protobuf:"bytes,2,req,name=UnlinkReason" json:"UnlinkReason,omitempty"`
	Group        *GroupLinkTarget            `protobuf:"bytes,3,req,name=Group" json:"Group,omitempty"`
}

func (x *GroupLinkChange) Reset() {
	*x = GroupLinkChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLinkChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLinkChange) ProtoMessage() {}

func (x *GroupLinkChange) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLinkChange.ProtoReflect.Descriptor instead.
func (*GroupLinkChange) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{67}
}

func (x *GroupLinkChange) GetType() GroupLinkChange_ChangeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GroupLinkChange_PARENT
}

func (x *GroupLinkChange) GetUnlinkReason() string {
	if x != nil && x.UnlinkReason != nil {
		return *x.UnlinkReason
	}
	return ""
}

func (x *GroupLinkChange) GetGroup() *GroupLinkTarget {
	if x != nil {
		return x.Group
	}
	return nil
}

type GetSubGroupsReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupLinkTarget []*GroupLinkTarget `protobuf:"bytes,1,rep,name=GroupLinkTarget" json:"GroupLinkTarget,omitempty"`
	Error           *string            `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetSubGroupsReturnFunction) Reset() {
	*x = GetSubGroupsReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubGroupsReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubGroupsReturnFunction) ProtoMessage() {}

func (x *GetSubGroupsReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubGroupsReturnFunction.ProtoReflect.Descriptor instead.
func (*GetSubGroupsReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{68}
}

func (x *GetSubGroupsReturnFunction) GetGroupLinkTarget() []*GroupLinkTarget {
	if x != nil {
		return x.GroupLinkTarget
	}
	return nil
}

func (x *GetSubGroupsReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GetSubscribedNewslettersReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Newsletter []*NewsletterMetadata `protobuf:"bytes,1,rep,name=Newsletter" json:"Newsletter,omitempty"`
	Error      *string               `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetSubscribedNewslettersReturnFunction) Reset() {
	*x = GetSubscribedNewslettersReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscribedNewslettersReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscribedNewslettersReturnFunction) ProtoMessage() {}

func (x *GetSubscribedNewslettersReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscribedNewslettersReturnFunction.ProtoReflect.Descriptor instead.
func (*GetSubscribedNewslettersReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{69}
}

func (x *GetSubscribedNewslettersReturnFunction) GetNewsletter() []*NewsletterMetadata {
	if x != nil {
		return x.Newsletter
	}
	return nil
}

func (x *GetSubscribedNewslettersReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GetUserDevicesreturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID   []*JID  `protobuf:"bytes,1,rep,name=JID" json:"JID,omitempty"`
	Error *string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *GetUserDevicesreturnFunction) Reset() {
	*x = GetUserDevicesreturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDevicesreturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDevicesreturnFunction) ProtoMessage() {}

func (x *GetUserDevicesreturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDevicesreturnFunction.ProtoReflect.Descriptor instead.
func (*GetUserDevicesreturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{70}
}

func (x *GetUserDevicesreturnFunction) GetJID() []*JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *GetUserDevicesreturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type NewsletterSubscribeLiveUpdatesReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *int64  `protobuf:"varint,1,opt,name=Duration" json:"Duration,omitempty"`
	Error    *string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *NewsletterSubscribeLiveUpdatesReturnFunction) Reset() {
	*x = NewsletterSubscribeLiveUpdatesReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterSubscribeLiveUpdatesReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterSubscribeLiveUpdatesReturnFunction) ProtoMessage() {}

func (x *NewsletterSubscribeLiveUpdatesReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterSubscribeLiveUpdatesReturnFunction.ProtoReflect.Descriptor instead.
func (*NewsletterSubscribeLiveUpdatesReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{71}
}

func (x *NewsletterSubscribeLiveUpdatesReturnFunction) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *NewsletterSubscribeLiveUpdatesReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type PairPhoneParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone                *string `protobuf:"bytes,1,opt,name=phone" json:"phone,omitempty"`
	ShowPushNotification *bool   `protobuf:"varint,2,opt,name=showPushNotification" json:"showPushNotification,omitempty"`
	ClientType           *int32  `protobuf:"varint,3,opt,name=clientType" json:"clientType,omitempty"`
	ClientDisplayName    *string `protobuf:"bytes,4,opt,name=clientDisplayName" json:"clientDisplayName,omitempty"`
}

func (x *PairPhoneParams) Reset() {
	*x = PairPhoneParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairPhoneParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairPhoneParams) ProtoMessage() {}

func (x *PairPhoneParams) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairPhoneParams.ProtoReflect.Descriptor instead.
func (*PairPhoneParams) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{72}
}

func (x *PairPhoneParams) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *PairPhoneParams) GetShowPushNotification() bool {
	if x != nil && x.ShowPushNotification != nil {
		return *x.ShowPushNotification
	}
	return false
}

func (x *PairPhoneParams) GetClientType() int32 {
	if x != nil && x.ClientType != nil {
		return *x.ClientType
	}
	return 0
}

func (x *PairPhoneParams) GetClientDisplayName() string {
	if x != nil && x.ClientDisplayName != nil {
		return *x.ClientDisplayName
	}
	return ""
}

type ContactQRLinkTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID      *JID    `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	Type     *string `protobuf:"bytes,2,req,name=Type" json:"Type,omitempty"`
	PushName *string `protobuf:"bytes,3,req,name=PushName" json:"PushName,omitempty"`
}

func (x *ContactQRLinkTarget) Reset() {
	*x = ContactQRLinkTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactQRLinkTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactQRLinkTarget) ProtoMessage() {}

func (x *ContactQRLinkTarget) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactQRLinkTarget.ProtoReflect.Descriptor instead.
func (*ContactQRLinkTarget) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{73}
}

func (x *ContactQRLinkTarget) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *ContactQRLinkTarget) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ContactQRLinkTarget) GetPushName() string {
	if x != nil && x.PushName != nil {
		return *x.PushName
	}
	return ""
}

type ResolveContactQRLinkReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactQrLink *ContactQRLinkTarget `protobuf:"bytes,1,opt,name=ContactQrLink" json:"ContactQrLink,omitempty"`
	Error         *string              `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *ResolveContactQRLinkReturnFunction) Reset() {
	*x = ResolveContactQRLinkReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveContactQRLinkReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveContactQRLinkReturnFunction) ProtoMessage() {}

func (x *ResolveContactQRLinkReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveContactQRLinkReturnFunction.ProtoReflect.Descriptor instead.
func (*ResolveContactQRLinkReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{74}
}

func (x *ResolveContactQRLinkReturnFunction) GetContactQrLink() *ContactQRLinkTarget {
	if x != nil {
		return x.ContactQrLink
	}
	return nil
}

func (x *ResolveContactQRLinkReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type BusinessMessageLinkTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID           *JID    `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	PushName      *string `protobuf:"bytes,2,req,name=PushName" json:"PushName,omitempty"`
	VerifiedName  *string `protobuf:"bytes,3,req,name=VerifiedName" json:"VerifiedName,omitempty"`
	IsSigned      *bool   `protobuf:"varint,4,req,name=IsSigned" json:"IsSigned,omitempty"`
	VerifiedLevel *string `protobuf:"bytes,5,req,name=VerifiedLevel" json:"VerifiedLevel,omitempty"`
	Message       *string `protobuf:"bytes,6,req,name=Message" json:"Message,omitempty"`
}

func (x *BusinessMessageLinkTarget) Reset() {
	*x = BusinessMessageLinkTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessMessageLinkTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessMessageLinkTarget) ProtoMessage() {}

func (x *BusinessMessageLinkTarget) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessMessageLinkTarget.ProtoReflect.Descriptor instead.
func (*BusinessMessageLinkTarget) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{75}
}

func (x *BusinessMessageLinkTarget) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *BusinessMessageLinkTarget) GetPushName() string {
	if x != nil && x.PushName != nil {
		return *x.PushName
	}
	return ""
}

func (x *BusinessMessageLinkTarget) GetVerifiedName() string {
	if x != nil && x.VerifiedName != nil {
		return *x.VerifiedName
	}
	return ""
}

func (x *BusinessMessageLinkTarget) GetIsSigned() bool {
	if x != nil && x.IsSigned != nil {
		return *x.IsSigned
	}
	return false
}

func (x *BusinessMessageLinkTarget) GetVerifiedLevel() string {
	if x != nil && x.VerifiedLevel != nil {
		return *x.VerifiedLevel
	}
	return ""
}

func (x *BusinessMessageLinkTarget) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ResolveBusinessMessageLinkReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageLinkTarget *BusinessMessageLinkTarget `protobuf:"bytes,1,opt,name=MessageLinkTarget" json:"MessageLinkTarget,omitempty"`
	Error             *string                    `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *ResolveBusinessMessageLinkReturnFunction) Reset() {
	*x = ResolveBusinessMessageLinkReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveBusinessMessageLinkReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveBusinessMessageLinkReturnFunction) ProtoMessage() {}

func (x *ResolveBusinessMessageLinkReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveBusinessMessageLinkReturnFunction.ProtoReflect.Descriptor instead.
func (*ResolveBusinessMessageLinkReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{76}
}

func (x *ResolveBusinessMessageLinkReturnFunction) GetMessageLinkTarget() *BusinessMessageLinkTarget {
	if x != nil {
		return x.MessageLinkTarget
	}
	return nil
}

func (x *ResolveBusinessMessageLinkReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type MutationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   []string                      `protobuf:"bytes,1,rep,name=Index" json:"Index,omitempty"`
	Version *int32                        `protobuf:"varint,2,req,name=Version" json:"Version,omitempty"`
	Value   *waSyncAction.SyncActionValue `protobuf:"bytes,3,req,name=Value" json:"Value,omitempty"`
}

func (x *MutationInfo) Reset() {
	*x = MutationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationInfo) ProtoMessage() {}

func (x *MutationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationInfo.ProtoReflect.Descriptor instead.
func (*MutationInfo) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{77}
}

func (x *MutationInfo) GetIndex() []string {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *MutationInfo) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *MutationInfo) GetValue() *waSyncAction.SyncActionValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type PatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *int64                 `protobuf:"varint,1,req,name=Timestamp" json:"Timestamp,omitempty"`
	Type      *PatchInfo_WAPatchName `protobuf:"varint,2,req,name=Type,enum=snakechat.PatchInfo_WAPatchName" json:"Type,omitempty"`
	Mutations []*MutationInfo        `protobuf:"bytes,3,rep,name=Mutations" json:"Mutations,omitempty"`
}

func (x *PatchInfo) Reset() {
	*x = PatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInfo) ProtoMessage() {}

func (x *PatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInfo.ProtoReflect.Descriptor instead.
func (*PatchInfo) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{78}
}

func (x *PatchInfo) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *PatchInfo) GetType() PatchInfo_WAPatchName {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PatchInfo_CRITICAL_BLOCK
}

func (x *PatchInfo) GetMutations() []*MutationInfo {
	if x != nil {
		return x.Mutations
	}
	return nil
}

type ContactsPutPushNameReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *bool   `protobuf:"varint,1,req,name=Status" json:"Status,omitempty"`
	PreviousName *string `protobuf:"bytes,2,opt,name=PreviousName" json:"PreviousName,omitempty"`
	Error        *string `protobuf:"bytes,3,opt,name=Error" json:"Error,omitempty"`
}

func (x *ContactsPutPushNameReturnFunction) Reset() {
	*x = ContactsPutPushNameReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsPutPushNameReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsPutPushNameReturnFunction) ProtoMessage() {}

func (x *ContactsPutPushNameReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsPutPushNameReturnFunction.ProtoReflect.Descriptor instead.
func (*ContactsPutPushNameReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{79}
}

func (x *ContactsPutPushNameReturnFunction) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

func (x *ContactsPutPushNameReturnFunction) GetPreviousName() string {
	if x != nil && x.PreviousName != nil {
		return *x.PreviousName
	}
	return ""
}

func (x *ContactsPutPushNameReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type ContactEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID       *JID    `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	FirstName *string `protobuf:"bytes,2,req,name=FirstName" json:"FirstName,omitempty"`
	FullName  *string `protobuf:"bytes,3,req,name=FullName" json:"FullName,omitempty"`
}

func (x *ContactEntry) Reset() {
	*x = ContactEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactEntry) ProtoMessage() {}

func (x *ContactEntry) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactEntry.ProtoReflect.Descriptor instead.
func (*ContactEntry) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{80}
}

func (x *ContactEntry) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *ContactEntry) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *ContactEntry) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

type ContactEntryArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactEntry []*ContactEntry `protobuf:"bytes,1,rep,name=ContactEntry" json:"ContactEntry,omitempty"`
}

func (x *ContactEntryArray) Reset() {
	*x = ContactEntryArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactEntryArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactEntryArray) ProtoMessage() {}

func (x *ContactEntryArray) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactEntryArray.ProtoReflect.Descriptor instead.
func (*ContactEntryArray) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{81}
}

func (x *ContactEntryArray) GetContactEntry() []*ContactEntry {
	if x != nil {
		return x.ContactEntry
	}
	return nil
}

type SetPrivacySettingReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *PrivacySettings `protobuf:"bytes,1,opt,name=settings" json:"settings,omitempty"`
	Error    *string          `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *SetPrivacySettingReturnFunction) Reset() {
	*x = SetPrivacySettingReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrivacySettingReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrivacySettingReturnFunction) ProtoMessage() {}

func (x *SetPrivacySettingReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrivacySettingReturnFunction.ProtoReflect.Descriptor instead.
func (*SetPrivacySettingReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{82}
}

func (x *SetPrivacySettingReturnFunction) GetSettings() *PrivacySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *SetPrivacySettingReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type ContactsGetContactReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactInfo *ContactInfo `protobuf:"bytes,1,opt,name=ContactInfo" json:"ContactInfo,omitempty"`
	Error       *string      `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *ContactsGetContactReturnFunction) Reset() {
	*x = ContactsGetContactReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetContactReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetContactReturnFunction) ProtoMessage() {}

func (x *ContactsGetContactReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetContactReturnFunction.ProtoReflect.Descriptor instead.
func (*ContactsGetContactReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{83}
}

func (x *ContactsGetContactReturnFunction) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *ContactsGetContactReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type ContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found        *bool   `protobuf:"varint,1,req,name=Found" json:"Found,omitempty"`
	FirstName    *string `protobuf:"bytes,2,req,name=FirstName" json:"FirstName,omitempty"`
	FullName     *string `protobuf:"bytes,3,req,name=FullName" json:"FullName,omitempty"`
	PushName     *string `protobuf:"bytes,4,req,name=PushName" json:"PushName,omitempty"`
	BusinessName *string `protobuf:"bytes,5,req,name=BusinessName" json:"BusinessName,omitempty"`
}

func (x *ContactInfo) Reset() {
	*x = ContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfo) ProtoMessage() {}

func (x *ContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfo.ProtoReflect.Descriptor instead.
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{84}
}

func (x *ContactInfo) GetFound() bool {
	if x != nil && x.Found != nil {
		return *x.Found
	}
	return false
}

func (x *ContactInfo) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *ContactInfo) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *ContactInfo) GetPushName() string {
	if x != nil && x.PushName != nil {
		return *x.PushName
	}
	return ""
}

func (x *ContactInfo) GetBusinessName() string {
	if x != nil && x.BusinessName != nil {
		return *x.BusinessName
	}
	return ""
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID  *JID         `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	Info *ContactInfo `protobuf:"bytes,2,req,name=Info" json:"Info,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{85}
}

func (x *Contact) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *Contact) GetInfo() *ContactInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ContactsGetAllContactsReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact []*Contact `protobuf:"bytes,1,rep,name=Contact" json:"Contact,omitempty"`
	Error   *string    `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (x *ContactsGetAllContactsReturnFunction) Reset() {
	*x = ContactsGetAllContactsReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetAllContactsReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetAllContactsReturnFunction) ProtoMessage() {}

func (x *ContactsGetAllContactsReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetAllContactsReturnFunction.ProtoReflect.Descriptor instead.
func (*ContactsGetAllContactsReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{86}
}

func (x *ContactsGetAllContactsReturnFunction) GetContact() []*Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *ContactsGetAllContactsReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// events
type QR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=Codes" json:"Codes,omitempty"`
}

func (x *QR) Reset() {
	*x = QR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QR) ProtoMessage() {}

func (x *QR) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QR.ProtoReflect.Descriptor instead.
func (*QR) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{87}
}

func (x *QR) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type PairStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *JID                `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	BusinessName *string             `protobuf:"bytes,2,req,name=BusinessName" json:"BusinessName,omitempty"`
	Platform     *string             `protobuf:"bytes,3,req,name=Platform" json:"Platform,omitempty"`
	Status       *PairStatus_PStatus `protobuf:"varint,4,req,name=Status,enum=snakechat.PairStatus_PStatus" json:"Status,omitempty"`
	Error        *string             `protobuf:"bytes,5,opt,name=Error" json:"Error,omitempty"`
}

func (x *PairStatus) Reset() {
	*x = PairStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairStatus) ProtoMessage() {}

func (x *PairStatus) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairStatus.ProtoReflect.Descriptor instead.
func (*PairStatus) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{88}
}

func (x *PairStatus) GetID() *JID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *PairStatus) GetBusinessName() string {
	if x != nil && x.BusinessName != nil {
		return *x.BusinessName
	}
	return ""
}

func (x *PairStatus) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *PairStatus) GetStatus() PairStatus_PStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return PairStatus_ERROR
}

func (x *PairStatus) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type Connected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *bool `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
}

func (x *Connected) Reset() {
	*x = Connected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connected) ProtoMessage() {}

func (x *Connected) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connected.ProtoReflect.Descriptor instead.
func (*Connected) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{89}
}

func (x *Connected) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

type KeepAliveTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCount  *int64 `protobuf:"varint,1,req,name=ErrorCount" json:"ErrorCount,omitempty"`
	LastSuccess *int64 `protobuf:"varint,2,req,name=LastSuccess" json:"LastSuccess,omitempty"`
}

func (x *KeepAliveTimeout) Reset() {
	*x = KeepAliveTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveTimeout) ProtoMessage() {}

func (x *KeepAliveTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveTimeout.ProtoReflect.Descriptor instead.
func (*KeepAliveTimeout) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{90}
}

func (x *KeepAliveTimeout) GetErrorCount() int64 {
	if x != nil && x.ErrorCount != nil {
		return *x.ErrorCount
	}
	return 0
}

func (x *KeepAliveTimeout) GetLastSuccess() int64 {
	if x != nil && x.LastSuccess != nil {
		return *x.LastSuccess
	}
	return 0
}

type KeepAliveRestored struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeepAliveRestored) Reset() {
	*x = KeepAliveRestored{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveRestored) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveRestored) ProtoMessage() {}

func (x *KeepAliveRestored) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveRestored.ProtoReflect.Descriptor instead.
func (*KeepAliveRestored) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{91}
}

type LoggedOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnConnect *bool                 `protobuf:"varint,1,req,name=OnConnect" json:"OnConnect,omitempty"`
	Reason    *ConnectFailureReason `protobuf:"varint,2,req,name=Reason,enum=snakechat.ConnectFailureReason" json:"Reason,omitempty"`
}

func (x *LoggedOut) Reset() {
	*x = LoggedOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedOut) ProtoMessage() {}

func (x *LoggedOut) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedOut.ProtoReflect.Descriptor instead.
func (*LoggedOut) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{92}
}

func (x *LoggedOut) GetOnConnect() bool {
	if x != nil && x.OnConnect != nil {
		return *x.OnConnect
	}
	return false
}

func (x *LoggedOut) GetReason() ConnectFailureReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ConnectFailureReason_GENERIC
}

type StreamReplaced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamReplaced) Reset() {
	*x = StreamReplaced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReplaced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReplaced) ProtoMessage() {}

func (x *StreamReplaced) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReplaced.ProtoReflect.Descriptor instead.
func (*StreamReplaced) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{93}
}

type TemporaryBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   *TemporaryBan_TempBanReason `protobuf:"varint,1,req,name=Code,enum=snakechat.TemporaryBan_TempBanReason" json:"Code,omitempty"`
	Expire *int64                      `protobuf:"varint,2,req,name=Expire" json:"Expire,omitempty"`
}

func (x *TemporaryBan) Reset() {
	*x = TemporaryBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporaryBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporaryBan) ProtoMessage() {}

func (x *TemporaryBan) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporaryBan.ProtoReflect.Descriptor instead.
func (*TemporaryBan) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{94}
}

func (x *TemporaryBan) GetCode() TemporaryBan_TempBanReason {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return TemporaryBan_SEND_TO_TOO_MANY_PEOPLE
}

func (x *TemporaryBan) GetExpire() int64 {
	if x != nil && x.Expire != nil {
		return *x.Expire
	}
	return 0
}

type ConnectFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason  *ConnectFailureReason `protobuf:"varint,1,req,name=Reason,enum=snakechat.ConnectFailureReason" json:"Reason,omitempty"`
	Message *string               `protobuf:"bytes,2,req,name=Message" json:"Message,omitempty"`
	Raw     *Node                 `protobuf:"bytes,3,req,name=Raw" json:"Raw,omitempty"`
}

func (x *ConnectFailure) Reset() {
	*x = ConnectFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectFailure) ProtoMessage() {}

func (x *ConnectFailure) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectFailure.ProtoReflect.Descriptor instead.
func (*ConnectFailure) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{95}
}

func (x *ConnectFailure) GetReason() ConnectFailureReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ConnectFailureReason_GENERIC
}

func (x *ConnectFailure) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ConnectFailure) GetRaw() *Node {
	if x != nil {
		return x.Raw
	}
	return nil
}

type ClientOutdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientOutdated) Reset() {
	*x = ClientOutdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientOutdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientOutdated) ProtoMessage() {}

func (x *ClientOutdated) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientOutdated.ProtoReflect.Descriptor instead.
func (*ClientOutdated) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{96}
}

type StreamError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *string `protobuf:"bytes,1,req,name=Code" json:"Code,omitempty"`
	Raw  *Node   `protobuf:"bytes,4,req,name=Raw" json:"Raw,omitempty"`
}

func (x *StreamError) Reset() {
	*x = StreamError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamError) ProtoMessage() {}

func (x *StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamError.ProtoReflect.Descriptor instead.
func (*StreamError) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{97}
}

func (x *StreamError) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *StreamError) GetRaw() *Node {
	if x != nil {
		return x.Raw
	}
	return nil
}

type Disconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *bool `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
}

func (x *Disconnected) Reset() {
	*x = Disconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disconnected) ProtoMessage() {}

func (x *Disconnected) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disconnected.ProtoReflect.Descriptor instead.
func (*Disconnected) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{98}
}

func (x *Disconnected) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

type HistorySync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *waHistorySync.HistorySync `protobuf:"bytes,1,req,name=Data" json:"Data,omitempty"`
}

func (x *HistorySync) Reset() {
	*x = HistorySync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistorySync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistorySync) ProtoMessage() {}

func (x *HistorySync) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistorySync.ProtoReflect.Descriptor instead.
func (*HistorySync) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{99}
}

func (x *HistorySync) GetData() *waHistorySync.HistorySync {
	if x != nil {
		return x.Data
	}
	return nil
}

// message DecryptFailMode // 14
// message UndecryptableMessage // 15
// message NewsLetterMessageMeta (Defined) // 16
// Message (Defined) // 17
type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageSource *MessageSource       `protobuf:"bytes,1,req,name=MessageSource" json:"MessageSource,omitempty"`
	MessageIDs    []string             `protobuf:"bytes,2,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	Timestamp     *int64               `protobuf:"varint,3,req,name=Timestamp" json:"Timestamp,omitempty"`
	Type          *Receipt_ReceiptType `protobuf:"varint,4,req,name=Type,enum=snakechat.Receipt_ReceiptType" json:"Type,omitempty"`
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{100}
}

func (x *Receipt) GetMessageSource() *MessageSource {
	if x != nil {
		return x.MessageSource
	}
	return nil
}

func (x *Receipt) GetMessageIDs() []string {
	if x != nil {
		return x.MessageIDs
	}
	return nil
}

func (x *Receipt) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Receipt) GetType() Receipt_ReceiptType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Receipt_DELIVERED
}

type ChatPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageSource *MessageSource                  `protobuf:"bytes,1,req,name=MessageSource" json:"MessageSource,omitempty"`
	State         *ChatPresence_ChatPresence      `protobuf:"varint,2,req,name=State,enum=snakechat.ChatPresence_ChatPresence" json:"State,omitempty"`
	Media         *ChatPresence_ChatPresenceMedia `protobuf:"varint,3,req,name=Media,enum=snakechat.ChatPresence_ChatPresenceMedia" json:"Media,omitempty"`
}

func (x *ChatPresence) Reset() {
	*x = ChatPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatPresence) ProtoMessage() {}

func (x *ChatPresence) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatPresence.ProtoReflect.Descriptor instead.
func (*ChatPresence) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{101}
}

func (x *ChatPresence) GetMessageSource() *MessageSource {
	if x != nil {
		return x.MessageSource
	}
	return nil
}

func (x *ChatPresence) GetState() ChatPresence_ChatPresence {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ChatPresence_COMPOSING
}

func (x *ChatPresence) GetMedia() ChatPresence_ChatPresenceMedia {
	if x != nil && x.Media != nil {
		return *x.Media
	}
	return ChatPresence_TEXT
}

type Presence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        *JID   `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	Unavailable *bool  `protobuf:"varint,2,req,name=Unavailable" json:"Unavailable,omitempty"`
	LastSeen    *int64 `protobuf:"varint,3,req,name=LastSeen" json:"LastSeen,omitempty"`
}

func (x *Presence) Reset() {
	*x = Presence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presence) ProtoMessage() {}

func (x *Presence) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presence.ProtoReflect.Descriptor instead.
func (*Presence) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{102}
}

func (x *Presence) GetFrom() *JID {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Presence) GetUnavailable() bool {
	if x != nil && x.Unavailable != nil {
		return *x.Unavailable
	}
	return false
}

func (x *Presence) GetLastSeen() int64 {
	if x != nil && x.LastSeen != nil {
		return *x.LastSeen
	}
	return 0
}

type JoinedGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason    *string    `protobuf:"bytes,1,req,name=Reason" json:"Reason,omitempty"`
	Type      *string    `protobuf:"bytes,2,req,name=Type" json:"Type,omitempty"`
	CreateKey *string    `protobuf:"bytes,3,req,name=CreateKey" json:"CreateKey,omitempty"`
	GroupInfo *GroupInfo `protobuf:"bytes,4,req,name=GroupInfo" json:"GroupInfo,omitempty"`
}

func (x *JoinedGroup) Reset() {
	*x = JoinedGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinedGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinedGroup) ProtoMessage() {}

func (x *JoinedGroup) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinedGroup.ProtoReflect.Descriptor instead.
func (*JoinedGroup) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{103}
}

func (x *JoinedGroup) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *JoinedGroup) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *JoinedGroup) GetCreateKey() string {
	if x != nil && x.CreateKey != nil {
		return *x.CreateKey
	}
	return ""
}

func (x *JoinedGroup) GetGroupInfo() *GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

type GroupInfoEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID                       *JID             `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	Notify                    *string          `protobuf:"bytes,2,req,name=Notify" json:"Notify,omitempty"`
	Sender                    *JID             `protobuf:"bytes,3,opt,name=Sender" json:"Sender,omitempty"`
	Timestamp                 *int64           `protobuf:"varint,4,req,name=Timestamp" json:"Timestamp,omitempty"`
	Name                      *GroupName       `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	Topic                     *GroupTopic      `protobuf:"bytes,6,opt,name=Topic" json:"Topic,omitempty"`
	Locked                    *GroupLocked     `protobuf:"bytes,7,opt,name=Locked" json:"Locked,omitempty"`
	Announce                  *GroupAnnounce   `protobuf:"bytes,8,opt,name=Announce" json:"Announce,omitempty"`
	Ephemeral                 *GroupEphemeral  `protobuf:"bytes,9,opt,name=Ephemeral" json:"Ephemeral,omitempty"`
	Delete                    *GroupDelete     `protobuf:"bytes,10,opt,name=Delete" json:"Delete,omitempty"`
	Link                      *GroupLinkChange `protobuf:"bytes,11,opt,name=Link" json:"Link,omitempty"`
	Unlink                    *GroupLinkChange `protobuf:"bytes,12,opt,name=Unlink" json:"Unlink,omitempty"`
	NewInviteLink             *string          `protobuf:"bytes,13,opt,name=NewInviteLink" json:"NewInviteLink,omitempty"`
	PrevParticipantsVersionID *string          `protobuf:"bytes,14,req,name=PrevParticipantsVersionID" json:"PrevParticipantsVersionID,omitempty"`
	ParticipantVersionID      *string          `protobuf:"bytes,15,req,name=ParticipantVersionID" json:"ParticipantVersionID,omitempty"`
	JoinReason                *string          `protobuf:"bytes,16,req,name=JoinReason" json:"JoinReason,omitempty"`
	Join                      []*JID           `protobuf:"bytes,17,rep,name=Join" json:"Join,omitempty"`
	Leave                     []*JID           `protobuf:"bytes,18,rep,name=Leave" json:"Leave,omitempty"`
	Promote                   []*JID           `protobuf:"bytes,19,rep,name=Promote" json:"Promote,omitempty"`
	Demote                    []*JID           `protobuf:"bytes,20,rep,name=Demote" json:"Demote,omitempty"`
	UnknownChanges            []*Node          `protobuf:"bytes,21,rep,name=UnknownChanges" json:"UnknownChanges,omitempty"`
}

func (x *GroupInfoEvent) Reset() {
	*x = GroupInfoEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoEvent) ProtoMessage() {}

func (x *GroupInfoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoEvent.ProtoReflect.Descriptor instead.
func (*GroupInfoEvent) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{104}
}

func (x *GroupInfoEvent) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *GroupInfoEvent) GetNotify() string {
	if x != nil && x.Notify != nil {
		return *x.Notify
	}
	return ""
}

func (x *GroupInfoEvent) GetSender() *JID {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *GroupInfoEvent) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *GroupInfoEvent) GetName() *GroupName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *GroupInfoEvent) GetTopic() *GroupTopic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *GroupInfoEvent) GetLocked() *GroupLocked {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (x *GroupInfoEvent) GetAnnounce() *GroupAnnounce {
	if x != nil {
		return x.Announce
	}
	return nil
}

func (x *GroupInfoEvent) GetEphemeral() *GroupEphemeral {
	if x != nil {
		return x.Ephemeral
	}
	return nil
}

func (x *GroupInfoEvent) GetDelete() *GroupDelete {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *GroupInfoEvent) GetLink() *GroupLinkChange {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *GroupInfoEvent) GetUnlink() *GroupLinkChange {
	if x != nil {
		return x.Unlink
	}
	return nil
}

func (x *GroupInfoEvent) GetNewInviteLink() string {
	if x != nil && x.NewInviteLink != nil {
		return *x.NewInviteLink
	}
	return ""
}

func (x *GroupInfoEvent) GetPrevParticipantsVersionID() string {
	if x != nil && x.PrevParticipantsVersionID != nil {
		return *x.PrevParticipantsVersionID
	}
	return ""
}

func (x *GroupInfoEvent) GetParticipantVersionID() string {
	if x != nil && x.ParticipantVersionID != nil {
		return *x.ParticipantVersionID
	}
	return ""
}

func (x *GroupInfoEvent) GetJoinReason() string {
	if x != nil && x.JoinReason != nil {
		return *x.JoinReason
	}
	return ""
}

func (x *GroupInfoEvent) GetJoin() []*JID {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *GroupInfoEvent) GetLeave() []*JID {
	if x != nil {
		return x.Leave
	}
	return nil
}

func (x *GroupInfoEvent) GetPromote() []*JID {
	if x != nil {
		return x.Promote
	}
	return nil
}

func (x *GroupInfoEvent) GetDemote() []*JID {
	if x != nil {
		return x.Demote
	}
	return nil
}

func (x *GroupInfoEvent) GetUnknownChanges() []*Node {
	if x != nil {
		return x.UnknownChanges
	}
	return nil
}

type Picture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID       *JID   `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	Author    *JID   `protobuf:"bytes,2,req,name=Author" json:"Author,omitempty"`
	Timestamp *int64 `protobuf:"varint,3,req,name=Timestamp" json:"Timestamp,omitempty"`
	Remove    *bool  `protobuf:"varint,4,req,name=Remove" json:"Remove,omitempty"`
}

func (x *Picture) Reset() {
	*x = Picture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Picture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Picture) ProtoMessage() {}

func (x *Picture) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Picture.ProtoReflect.Descriptor instead.
func (*Picture) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{105}
}

func (x *Picture) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *Picture) GetAuthor() *JID {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Picture) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Picture) GetRemove() bool {
	if x != nil && x.Remove != nil {
		return *x.Remove
	}
	return false
}

type IdentityChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID       *JID   `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	Timestamp *int64 `protobuf:"varint,2,req,name=Timestamp" json:"Timestamp,omitempty"`
	Implicit  *bool  `protobuf:"varint,3,req,name=Implicit" json:"Implicit,omitempty"`
}

func (x *IdentityChange) Reset() {
	*x = IdentityChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityChange) ProtoMessage() {}

func (x *IdentityChange) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityChange.ProtoReflect.Descriptor instead.
func (*IdentityChange) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{106}
}

func (x *IdentityChange) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *IdentityChange) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *IdentityChange) GetImplicit() bool {
	if x != nil && x.Implicit != nil {
		return *x.Implicit
	}
	return false
}

type PrivacySettingsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewSettings         *PrivacySettings `protobuf:"bytes,1,req,name=NewSettings" json:"NewSettings,omitempty"`
	GroupAddChanged     *bool            `protobuf:"varint,2,req,name=GroupAddChanged" json:"GroupAddChanged,omitempty"`
	LastSeenChanged     *bool            `protobuf:"varint,3,req,name=LastSeenChanged" json:"LastSeenChanged,omitempty"`
	StatusChanged       *bool            `protobuf:"varint,4,req,name=StatusChanged" json:"StatusChanged,omitempty"`
	ProfileChanged      *bool            `protobuf:"varint,5,req,name=ProfileChanged" json:"ProfileChanged,omitempty"`
	ReadReceiptsChanged *bool            `protobuf:"varint,6,req,name=ReadReceiptsChanged" json:"ReadReceiptsChanged,omitempty"`
	OnlineChanged       *bool            `protobuf:"varint,7,req,name=OnlineChanged" json:"OnlineChanged,omitempty"`
	CallAddChanged      *bool            `protobuf:"varint,8,req,name=CallAddChanged" json:"CallAddChanged,omitempty"`
}

func (x *PrivacySettingsEvent) Reset() {
	*x = PrivacySettingsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivacySettingsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivacySettingsEvent) ProtoMessage() {}

func (x *PrivacySettingsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivacySettingsEvent.ProtoReflect.Descriptor instead.
func (*PrivacySettingsEvent) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{107}
}

func (x *PrivacySettingsEvent) GetNewSettings() *PrivacySettings {
	if x != nil {
		return x.NewSettings
	}
	return nil
}

func (x *PrivacySettingsEvent) GetGroupAddChanged() bool {
	if x != nil && x.GroupAddChanged != nil {
		return *x.GroupAddChanged
	}
	return false
}

func (x *PrivacySettingsEvent) GetLastSeenChanged() bool {
	if x != nil && x.LastSeenChanged != nil {
		return *x.LastSeenChanged
	}
	return false
}

func (x *PrivacySettingsEvent) GetStatusChanged() bool {
	if x != nil && x.StatusChanged != nil {
		return *x.StatusChanged
	}
	return false
}

func (x *PrivacySettingsEvent) GetProfileChanged() bool {
	if x != nil && x.ProfileChanged != nil {
		return *x.ProfileChanged
	}
	return false
}

func (x *PrivacySettingsEvent) GetReadReceiptsChanged() bool {
	if x != nil && x.ReadReceiptsChanged != nil {
		return *x.ReadReceiptsChanged
	}
	return false
}

func (x *PrivacySettingsEvent) GetOnlineChanged() bool {
	if x != nil && x.OnlineChanged != nil {
		return *x.OnlineChanged
	}
	return false
}

func (x *PrivacySettingsEvent) GetCallAddChanged() bool {
	if x != nil && x.CallAddChanged != nil {
		return *x.CallAddChanged
	}
	return false
}

type OfflineSyncPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          *int32 `protobuf:"varint,1,req,name=Total" json:"Total,omitempty"`
	AppDataChanges *int32 `protobuf:"varint,2,req,name=AppDataChanges" json:"AppDataChanges,omitempty"`
	Message        *int32 `protobuf:"varint,3,req,name=Message" json:"Message,omitempty"`
	Notifications  *int32 `protobuf:"varint,4,req,name=Notifications" json:"Notifications,omitempty"`
	Receipts       *int32 `protobuf:"varint,5,req,name=Receipts" json:"Receipts,omitempty"`
}

func (x *OfflineSyncPreview) Reset() {
	*x = OfflineSyncPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineSyncPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineSyncPreview) ProtoMessage() {}

func (x *OfflineSyncPreview) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineSyncPreview.ProtoReflect.Descriptor instead.
func (*OfflineSyncPreview) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{108}
}

func (x *OfflineSyncPreview) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *OfflineSyncPreview) GetAppDataChanges() int32 {
	if x != nil && x.AppDataChanges != nil {
		return *x.AppDataChanges
	}
	return 0
}

func (x *OfflineSyncPreview) GetMessage() int32 {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return 0
}

func (x *OfflineSyncPreview) GetNotifications() int32 {
	if x != nil && x.Notifications != nil {
		return *x.Notifications
	}
	return 0
}

func (x *OfflineSyncPreview) GetReceipts() int32 {
	if x != nil && x.Receipts != nil {
		return *x.Receipts
	}
	return 0
}

type OfflineSyncCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *int32 `protobuf:"varint,1,req,name=Count" json:"Count,omitempty"`
}

func (x *OfflineSyncCompleted) Reset() {
	*x = OfflineSyncCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineSyncCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineSyncCompleted) ProtoMessage() {}

func (x *OfflineSyncCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineSyncCompleted.ProtoReflect.Descriptor instead.
func (*OfflineSyncCompleted) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{109}
}

func (x *OfflineSyncCompleted) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type BlocklistEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    *BlocklistEvent_Actions `protobuf:"varint,1,req,name=Action,enum=snakechat.BlocklistEvent_Actions" json:"Action,omitempty"`
	DHASH     *string                 `protobuf:"bytes,2,req,name=DHASH" json:"DHASH,omitempty"`
	PrevDHash *string                 `protobuf:"bytes,3,req,name=PrevDHash" json:"PrevDHash,omitempty"`
	Changes   []*BlocklistChange      `protobuf:"bytes,4,rep,name=Changes" json:"Changes,omitempty"`
}

func (x *BlocklistEvent) Reset() {
	*x = BlocklistEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocklistEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocklistEvent) ProtoMessage() {}

func (x *BlocklistEvent) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocklistEvent.ProtoReflect.Descriptor instead.
func (*BlocklistEvent) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{110}
}

func (x *BlocklistEvent) GetAction() BlocklistEvent_Actions {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return BlocklistEvent_DEFAULT
}

func (x *BlocklistEvent) GetDHASH() string {
	if x != nil && x.DHASH != nil {
		return *x.DHASH
	}
	return ""
}

func (x *BlocklistEvent) GetPrevDHash() string {
	if x != nil && x.PrevDHash != nil {
		return *x.PrevDHash
	}
	return ""
}

func (x *BlocklistEvent) GetChanges() []*BlocklistChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type BlocklistChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID         *JID                    `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	BlockAction *BlocklistChange_Action `protobuf:"varint,2,req,name=BlockAction,enum=snakechat.BlocklistChange_Action" json:"BlockAction,omitempty"`
}

func (x *BlocklistChange) Reset() {
	*x = BlocklistChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocklistChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocklistChange) ProtoMessage() {}

func (x *BlocklistChange) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocklistChange.ProtoReflect.Descriptor instead.
func (*BlocklistChange) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{111}
}

func (x *BlocklistChange) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *BlocklistChange) GetBlockAction() BlocklistChange_Action {
	if x != nil && x.BlockAction != nil {
		return *x.BlockAction
	}
	return BlocklistChange_BLOCK
}

type NewsletterJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterMetadata *NewsletterMetadata `protobuf:"bytes,1,req,name=NewsletterMetadata" json:"NewsletterMetadata,omitempty"`
}

func (x *NewsletterJoin) Reset() {
	*x = NewsletterJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterJoin) ProtoMessage() {}

func (x *NewsletterJoin) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterJoin.ProtoReflect.Descriptor instead.
func (*NewsletterJoin) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{112}
}

func (x *NewsletterJoin) GetNewsletterMetadata() *NewsletterMetadata {
	if x != nil {
		return x.NewsletterMetadata
	}
	return nil
}

type NewsletterLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   *JID            `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	Role *NewsletterRole `protobuf:"varint,2,req,name=Role,enum=snakechat.NewsletterRole" json:"Role,omitempty"`
}

func (x *NewsletterLeave) Reset() {
	*x = NewsletterLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterLeave) ProtoMessage() {}

func (x *NewsletterLeave) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterLeave.ProtoReflect.Descriptor instead.
func (*NewsletterLeave) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{113}
}

func (x *NewsletterLeave) GetID() *JID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *NewsletterLeave) GetRole() NewsletterRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return NewsletterRole_SUBSCRIBER
}

type NewsletterMuteChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   *JID                 `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	Mute *NewsletterMuteState `protobuf:"varint,2,req,name=Mute,enum=snakechat.NewsletterMuteState" json:"Mute,omitempty"`
}

func (x *NewsletterMuteChange) Reset() {
	*x = NewsletterMuteChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterMuteChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterMuteChange) ProtoMessage() {}

func (x *NewsletterMuteChange) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterMuteChange.ProtoReflect.Descriptor instead.
func (*NewsletterMuteChange) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{114}
}

func (x *NewsletterMuteChange) GetID() *JID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *NewsletterMuteChange) GetMute() NewsletterMuteState {
	if x != nil && x.Mute != nil {
		return *x.Mute
	}
	return NewsletterMuteState_ON
}

type NewsletterLiveUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JID      *JID                 `protobuf:"bytes,1,req,name=JID" json:"JID,omitempty"`
	TIME     *int64               `protobuf:"varint,2,req,name=TIME" json:"TIME,omitempty"`
	Messages []*NewsletterMessage `protobuf:"bytes,3,rep,name=Messages" json:"Messages,omitempty"`
}

func (x *NewsletterLiveUpdate) Reset() {
	*x = NewsletterLiveUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsletterLiveUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsletterLiveUpdate) ProtoMessage() {}

func (x *NewsletterLiveUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsletterLiveUpdate.ProtoReflect.Descriptor instead.
func (*NewsletterLiveUpdate) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{115}
}

func (x *NewsletterLiveUpdate) GetJID() *JID {
	if x != nil {
		return x.JID
	}
	return nil
}

func (x *NewsletterLiveUpdate) GetTIME() int64 {
	if x != nil && x.TIME != nil {
		return *x.TIME
	}
	return 0
}

func (x *NewsletterLiveUpdate) GetMessages() []*NewsletterMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

// call events
type BasicCallMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        *JID    `protobuf:"bytes,1,req,name=from" json:"from,omitempty"`
	Timestamp   *int64  `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	CallCreator *JID    `protobuf:"bytes,3,req,name=callCreator" json:"callCreator,omitempty"`
	CallID      *string `protobuf:"bytes,4,req,name=callID" json:"callID,omitempty"`
}

func (x *BasicCallMeta) Reset() {
	*x = BasicCallMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicCallMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicCallMeta) ProtoMessage() {}

func (x *BasicCallMeta) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicCallMeta.ProtoReflect.Descriptor instead.
func (*BasicCallMeta) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{116}
}

func (x *BasicCallMeta) GetFrom() *JID {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *BasicCallMeta) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *BasicCallMeta) GetCallCreator() *JID {
	if x != nil {
		return x.CallCreator
	}
	return nil
}

func (x *BasicCallMeta) GetCallID() string {
	if x != nil && x.CallID != nil {
		return *x.CallID
	}
	return ""
}

type CallRemoteMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemotePlatform *string `protobuf:"bytes,1,req,name=remotePlatform" json:"remotePlatform,omitempty"`
	RemoteVersion  *string `protobuf:"bytes,2,req,name=remoteVersion" json:"remoteVersion,omitempty"`
}

func (x *CallRemoteMeta) Reset() {
	*x = CallRemoteMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRemoteMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRemoteMeta) ProtoMessage() {}

func (x *CallRemoteMeta) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRemoteMeta.ProtoReflect.Descriptor instead.
func (*CallRemoteMeta) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{117}
}

func (x *CallRemoteMeta) GetRemotePlatform() string {
	if x != nil && x.RemotePlatform != nil {
		return *x.RemotePlatform
	}
	return ""
}

func (x *CallRemoteMeta) GetRemoteVersion() string {
	if x != nil && x.RemoteVersion != nil {
		return *x.RemoteVersion
	}
	return ""
}

// events
type CallOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicCallMeta  *BasicCallMeta  `protobuf:"bytes,1,req,name=basicCallMeta" json:"basicCallMeta,omitempty"`
	CallRemoteMeta *CallRemoteMeta `protobuf:"bytes,2,req,name=callRemoteMeta" json:"callRemoteMeta,omitempty"`
	Data           *Node           `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *CallOffer) Reset() {
	*x = CallOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallOffer) ProtoMessage() {}

func (x *CallOffer) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallOffer.ProtoReflect.Descriptor instead.
func (*CallOffer) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{118}
}

func (x *CallOffer) GetBasicCallMeta() *BasicCallMeta {
	if x != nil {
		return x.BasicCallMeta
	}
	return nil
}

func (x *CallOffer) GetCallRemoteMeta() *CallRemoteMeta {
	if x != nil {
		return x.CallRemoteMeta
	}
	return nil
}

func (x *CallOffer) GetData() *Node {
	if x != nil {
		return x.Data
	}
	return nil
}

type CallAccept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicCallMeta  *BasicCallMeta  `protobuf:"bytes,1,req,name=basicCallMeta" json:"basicCallMeta,omitempty"`
	CallRemoteMeta *CallRemoteMeta `protobuf:"bytes,2,req,name=callRemoteMeta" json:"callRemoteMeta,omitempty"`
	Data           *Node           `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *CallAccept) Reset() {
	*x = CallAccept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallAccept) ProtoMessage() {}

func (x *CallAccept) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallAccept.ProtoReflect.Descriptor instead.
func (*CallAccept) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{119}
}

func (x *CallAccept) GetBasicCallMeta() *BasicCallMeta {
	if x != nil {
		return x.BasicCallMeta
	}
	return nil
}

func (x *CallAccept) GetCallRemoteMeta() *CallRemoteMeta {
	if x != nil {
		return x.CallRemoteMeta
	}
	return nil
}

func (x *CallAccept) GetData() *Node {
	if x != nil {
		return x.Data
	}
	return nil
}

type CallPreAccept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicCallMeta  *BasicCallMeta  `protobuf:"bytes,1,req,name=basicCallMeta" json:"basicCallMeta,omitempty"`
	CallRemoteMeta *CallRemoteMeta `protobuf:"bytes,2,req,name=callRemoteMeta" json:"callRemoteMeta,omitempty"`
	Data           *Node           `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *CallPreAccept) Reset() {
	*x = CallPreAccept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallPreAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallPreAccept) ProtoMessage() {}

func (x *CallPreAccept) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallPreAccept.ProtoReflect.Descriptor instead.
func (*CallPreAccept) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{120}
}

func (x *CallPreAccept) GetBasicCallMeta() *BasicCallMeta {
	if x != nil {
		return x.BasicCallMeta
	}
	return nil
}

func (x *CallPreAccept) GetCallRemoteMeta() *CallRemoteMeta {
	if x != nil {
		return x.CallRemoteMeta
	}
	return nil
}

func (x *CallPreAccept) GetData() *Node {
	if x != nil {
		return x.Data
	}
	return nil
}

type CallTransport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicCallMeta  *BasicCallMeta  `protobuf:"bytes,1,req,name=basicCallMeta" json:"basicCallMeta,omitempty"`
	CallRemoteMeta *CallRemoteMeta `protobuf:"bytes,2,req,name=callRemoteMeta" json:"callRemoteMeta,omitempty"`
	Data           *Node           `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *CallTransport) Reset() {
	*x = CallTransport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallTransport) ProtoMessage() {}

func (x *CallTransport) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallTransport.ProtoReflect.Descriptor instead.
func (*CallTransport) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{121}
}

func (x *CallTransport) GetBasicCallMeta() *BasicCallMeta {
	if x != nil {
		return x.BasicCallMeta
	}
	return nil
}

func (x *CallTransport) GetCallRemoteMeta() *CallRemoteMeta {
	if x != nil {
		return x.CallRemoteMeta
	}
	return nil
}

func (x *CallTransport) GetData() *Node {
	if x != nil {
		return x.Data
	}
	return nil
}

type CallOfferNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicCallMeta *BasicCallMeta `protobuf:"bytes,1,req,name=basicCallMeta" json:"basicCallMeta,omitempty"`
	Media         *string        `protobuf:"bytes,2,req,name=media" json:"media,omitempty"`
	Type          *string        `protobuf:"bytes,3,req,name=type" json:"type,omitempty"`
	Data          *Node          `protobuf:"bytes,4,req,name=data" json:"data,omitempty"`
}

func (x *CallOfferNotice) Reset() {
	*x = CallOfferNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallOfferNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallOfferNotice) ProtoMessage() {}

func (x *CallOfferNotice) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallOfferNotice.ProtoReflect.Descriptor instead.
func (*CallOfferNotice) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{122}
}

func (x *CallOfferNotice) GetBasicCallMeta() *BasicCallMeta {
	if x != nil {
		return x.BasicCallMeta
	}
	return nil
}

func (x *CallOfferNotice) GetMedia() string {
	if x != nil && x.Media != nil {
		return *x.Media
	}
	return ""
}

func (x *CallOfferNotice) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CallOfferNotice) GetData() *Node {
	if x != nil {
		return x.Data
	}
	return nil
}

type CallRelayLatency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicCallMeta *BasicCallMeta `protobuf:"bytes,1,req,name=basicCallMeta" json:"basicCallMeta,omitempty"`
	Data          *Node          `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
}

func (x *CallRelayLatency) Reset() {
	*x = CallRelayLatency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRelayLatency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRelayLatency) ProtoMessage() {}

func (x *CallRelayLatency) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRelayLatency.ProtoReflect.Descriptor instead.
func (*CallRelayLatency) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{123}
}

func (x *CallRelayLatency) GetBasicCallMeta() *BasicCallMeta {
	if x != nil {
		return x.BasicCallMeta
	}
	return nil
}

func (x *CallRelayLatency) GetData() *Node {
	if x != nil {
		return x.Data
	}
	return nil
}

type CallTerminate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicCallMeta *BasicCallMeta `protobuf:"bytes,1,req,name=basicCallMeta" json:"basicCallMeta,omitempty"`
	Reason        *string        `protobuf:"bytes,2,req,name=reason" json:"reason,omitempty"`
	Data          *Node          `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *CallTerminate) Reset() {
	*x = CallTerminate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallTerminate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallTerminate) ProtoMessage() {}

func (x *CallTerminate) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallTerminate.ProtoReflect.Descriptor instead.
func (*CallTerminate) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{124}
}

func (x *CallTerminate) GetBasicCallMeta() *BasicCallMeta {
	if x != nil {
		return x.BasicCallMeta
	}
	return nil
}

func (x *CallTerminate) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *CallTerminate) GetData() *Node {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnknownCallEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *Node `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
}

func (x *UnknownCallEvent) Reset() {
	*x = UnknownCallEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownCallEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownCallEvent) ProtoMessage() {}

func (x *UnknownCallEvent) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownCallEvent.ProtoReflect.Descriptor instead.
func (*UnknownCallEvent) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{125}
}

func (x *UnknownCallEvent) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type UpdateGroupParticipantsReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *string             `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
	Participants []*GroupParticipant `protobuf:"bytes,2,rep,name=participants" json:"participants,omitempty"`
}

func (x *UpdateGroupParticipantsReturnFunction) Reset() {
	*x = UpdateGroupParticipantsReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupParticipantsReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupParticipantsReturnFunction) ProtoMessage() {}

func (x *UpdateGroupParticipantsReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupParticipantsReturnFunction.ProtoReflect.Descriptor instead.
func (*UpdateGroupParticipantsReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{126}
}

func (x *UpdateGroupParticipantsReturnFunction) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *UpdateGroupParticipantsReturnFunction) GetParticipants() []*GroupParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type GetMessageForRetryReturnFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEmpty *bool          `protobuf:"varint,1,opt,name=isEmpty,def=0" json:"isEmpty,omitempty"`
	Message *waE2E.Message `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

// Default values for GetMessageForRetryReturnFunction fields.
const (
	Default_GetMessageForRetryReturnFunction_IsEmpty = bool(false)
)

func (x *GetMessageForRetryReturnFunction) Reset() {
	*x = GetMessageForRetryReturnFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageForRetryReturnFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageForRetryReturnFunction) ProtoMessage() {}

func (x *GetMessageForRetryReturnFunction) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageForRetryReturnFunction.ProtoReflect.Descriptor instead.
func (*GetMessageForRetryReturnFunction) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{127}
}

func (x *GetMessageForRetryReturnFunction) GetIsEmpty() bool {
	if x != nil && x.IsEmpty != nil {
		return *x.IsEmpty
	}
	return Default_GetMessageForRetryReturnFunction_IsEmpty
}

func (x *GetMessageForRetryReturnFunction) GetMessage() *waE2E.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// chat_setting_store
type LocalChatSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found      *bool    `protobuf:"varint,1,req,name=Found" json:"Found,omitempty"`
	MutedUntil *float64 `protobuf:"fixed64,2,req,name=MutedUntil" json:"MutedUntil,omitempty"`
	Pinned     *bool    `protobuf:"varint,3,req,name=Pinned" json:"Pinned,omitempty"`
	Archived   *bool    `protobuf:"varint,4,req,name=Archived" json:"Archived,omitempty"`
}

func (x *LocalChatSettings) Reset() {
	*x = LocalChatSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalChatSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalChatSettings) ProtoMessage() {}

func (x *LocalChatSettings) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalChatSettings.ProtoReflect.Descriptor instead.
func (*LocalChatSettings) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{128}
}

func (x *LocalChatSettings) GetFound() bool {
	if x != nil && x.Found != nil {
		return *x.Found
	}
	return false
}

func (x *LocalChatSettings) GetMutedUntil() float64 {
	if x != nil && x.MutedUntil != nil {
		return *x.MutedUntil
	}
	return 0
}

func (x *LocalChatSettings) GetPinned() bool {
	if x != nil && x.Pinned != nil {
		return *x.Pinned
	}
	return false
}

func (x *LocalChatSettings) GetArchived() bool {
	if x != nil && x.Archived != nil {
		return *x.Archived
	}
	return false
}

// New Verision for Function
type ReturnFunctionWithError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *string `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
	// Types that are assignable to Return:
	//
	//	*ReturnFunctionWithError_LocalChatSettings
	Return isReturnFunctionWithError_Return `protobuf_oneof:"Return"`
}

func (x *ReturnFunctionWithError) Reset() {
	*x = ReturnFunctionWithError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakechat_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnFunctionWithError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnFunctionWithError) ProtoMessage() {}

func (x *ReturnFunctionWithError) ProtoReflect() protoreflect.Message {
	mi := &file_snakechat_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnFunctionWithError.ProtoReflect.Descriptor instead.
func (*ReturnFunctionWithError) Descriptor() ([]byte, []int) {
	return file_snakechat_proto_rawDescGZIP(), []int{129}
}

func (x *ReturnFunctionWithError) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (m *ReturnFunctionWithError) GetReturn() isReturnFunctionWithError_Return {
	if m != nil {
		return m.Return
	}
	return nil
}

func (x *ReturnFunctionWithError) GetLocalChatSettings() *LocalChatSettings {
	if x, ok := x.GetReturn().(*ReturnFunctionWithError_LocalChatSettings); ok {
		return x.LocalChatSettings
	}
	return nil
}

type isReturnFunctionWithError_Return interface {
	isReturnFunctionWithError_Return()
}

type ReturnFunctionWithError_LocalChatSettings struct {
	LocalChatSettings *LocalChatSettings `protobuf:"bytes,2,opt,name=LocalChatSettings,oneof"`
}

func (*ReturnFunctionWithError_LocalChatSettings) isReturnFunctionWithError_Return() {}

var File_snakechat_proto protoreflect.FileDescriptor

var file_snakechat_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x4e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x1a, 0x29, 0x77, 0x61, 0x56, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x2f, 0x57, 0x41, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x73, 0x56, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x77, 0x61, 0x45, 0x32, 0x45, 0x2f, 0x57, 0x41, 0x57, 0x65, 0x62,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x45, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x77, 0x61, 0x57, 0x65, 0x62, 0x2f, 0x57, 0x41, 0x57, 0x65, 0x62, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x57, 0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x77, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x57, 0x41, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2d, 0x77, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e,
	0x63, 0x2f, 0x57, 0x41, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x61, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x08, 0x52, 0x61, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x49, 0x73, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x07, 0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xad, 0x03, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x75, 0x73, 0x68,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x64,
	0x69, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x39,
	0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0d, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x6e, 0x63, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xcb, 0x01, 0x0a, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x43,
	0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x24, 0x0a,
	0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x06, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x07, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x12, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e,
	0x4a, 0x49, 0x44, 0x52, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x50, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x57, 0x41, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x56, 0x6e,
	0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x07,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x57, 0x41, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x56, 0x6e,
	0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x9b, 0x01, 0x0a, 0x14, 0x49, 0x73, 0x4f, 0x6e, 0x57, 0x68, 0x61, 0x74, 0x73, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x73, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x73, 0x49, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3,
	0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x07,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x07, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x42,
	0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0d, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22,
	0x69, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x53, 0x65, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x53, 0x65, 0x74, 0x42, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x0a, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x53, 0x65, 0x74, 0x42, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x29, 0x0a, 0x0b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x5d, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x11, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x45, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73,
	0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x49,
	0x6e, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x1d, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x11,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x12, 0x2c,
	0x0a, 0x11, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x11, 0x49, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x50, 0x0a, 0x1a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d,
	0x02, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03,
	0x4a, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x03, 0x4c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03,
	0x4c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xca,
	0x06, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x08,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x08, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x4a, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49,
	0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x36, 0x0a,
	0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x6f, 0x52, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a,
	0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x18, 0x0b, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x52, 0x11,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75,
	0x62, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0d, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x22, 0x93, 0x02, 0x0a, 0x13,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0c,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6c,
	0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x39, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x57, 0x0a, 0x1f, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x03, 0x4a,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x46, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6d, 0x0a,
	0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x1b,
	0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x85, 0x01, 0x0a, 0x1a, 0x49, 0x73, 0x4f, 0x6e, 0x57, 0x68, 0x61, 0x74, 0x73, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x14, 0x49, 0x73, 0x4f, 0x6e, 0x57, 0x68, 0x61, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x49, 0x73, 0x4f, 0x6e, 0x57, 0x68, 0x61, 0x74, 0x73,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x49, 0x73, 0x4f,
	0x6e, 0x57, 0x68, 0x61, 0x74, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x70, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x6b, 0x0a, 0x1b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x6c,
	0x6c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x57, 0x41, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x45, 0x32, 0x45, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73,
	0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x4e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x64, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x51, 0x52, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x73, 0x0a, 0x29, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x0c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5f,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xf6, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x0c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x08, 0x4a, 0x49, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x4a, 0x49, 0x44, 0x53, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44,
	0x52, 0x04, 0x4a, 0x49, 0x44, 0x53, 0x22, 0x21, 0x0a, 0x0b, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x15, 0x4e, 0x65, 0x77,
	0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x64, 0x69, 0x74, 0x54, 0x53, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x06, 0x45, 0x64, 0x69, 0x74, 0x54, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x53, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x53, 0x22, 0x4d, 0x0a, 0x0b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xe0, 0x04, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x34, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x57, 0x41, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x73, 0x45, 0x32, 0x45, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x45, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x45, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x56, 0x69, 0x65,
	0x77, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x56,
	0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x56, 0x69, 0x65,
	0x77, 0x4f, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x49,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x15, 0x49,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x15, 0x49, 0x73, 0x56, 0x69,
	0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x15, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x4c, 0x6f, 0x74,
	0x74, 0x69, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x0f, 0x49, 0x73, 0x4c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x45, 0x64, 0x69, 0x74, 0x18, 0x09, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x45, 0x64, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x57, 0x65, 0x62, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x57, 0x41, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0x57, 0x65, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x65, 0x62, 0x4d, 0x73, 0x67,
	0x12, 0x32, 0x0a, 0x14, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x09, 0x52, 0x14,
	0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e, 0x4e, 0x65,
	0x77, 0x73, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4f, 0x53, 0x55, 0x53, 0x50, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x22, 0x54, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x52, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x4e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x17, 0x4e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x04, 0x22, 0x5e, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0xc0, 0x04, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e,
	0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x36, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x1b, 0x4e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x02, 0x22, 0x79, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x30, 0x0a, 0x04, 0x4d, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x4d,
	0x75, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x6f, 0x6c, 0x65,
	0x22, 0xef, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49,
	0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x22, 0x43, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x44, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05,
	0x44, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x4a, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49,
	0x44, 0x52, 0x04, 0x4a, 0x49, 0x44, 0x73, 0x22, 0x34, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x01,
	0x0a, 0x11, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x56, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x57, 0x41, 0x57, 0x65,
	0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x45, 0x32, 0x45, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8a,
	0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x4e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe9, 0x04, 0x0a, 0x0f,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x43, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4b, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x64, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x12, 0x3f, 0x0a,
	0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x77,
	0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x43, 0x54, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43,
	0x54, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x45, 0x4e,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x07, 0x22, 0x98, 0x01, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a,
	0x49, 0x44, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a,
	0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73,
	0x52, 0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x03,
	0x4e, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x03, 0x4e, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x09, 0x49,
	0x6e, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x27, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x22, 0x6e, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x09, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x3f, 0x0a, 0x11, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x22, 0x74, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44,
	0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x52, 0x11,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75,
	0x62, 0x22, 0xce, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x2e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x55, 0x42, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x22, 0x76, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7b, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a,
	0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x60, 0x0a,
	0x2c, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xa9, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x69, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x68, 0x6f,
	0x77, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x75, 0x73,
	0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x51, 0x52, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x51, 0x52, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x51, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x51, 0x52, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x51, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x28, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x73, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x57, 0x41, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x41, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x0b, 0x57,
	0x41, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x05, 0x22, 0x75, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x50, 0x75, 0x74, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x68, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x39,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x6d, 0x0a, 0x1f, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x70, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75,
	0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x75,
	0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44,
	0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x68, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1a, 0x0a, 0x02, 0x51, 0x52, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x21, 0x0a,
	0x07, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x22, 0x23, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x10, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x22, 0x60, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x09, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x42, 0x61, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x42,
	0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x42,
	0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x4e, 0x44,
	0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x45, 0x4f,
	0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x05, 0x22, 0x82, 0x01, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x52, 0x61,
	0x77, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x52, 0x61, 0x77, 0x22, 0x26, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x49, 0x0a, 0x0b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3a,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x57,
	0x41, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe3, 0x02, 0x0a, 0x07, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x07,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x09,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0a, 0x12, 0x10,
	0x0a, 0x0c, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x0b,
	0x22, 0x9a, 0x02, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x29, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x02, 0x22, 0x28, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x02, 0x22, 0x6a, 0x0a,
	0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x07, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e,
	0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x24, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x06,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x06, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x09, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x06,
	0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x24,
	0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x76, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x09, 0x52, 0x19, 0x50, 0x72, 0x65, 0x76, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a,
	0x49, 0x44, 0x52, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x07, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a,
	0x49, 0x44, 0x52, 0x06, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x03, 0x4a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x6a, 0x0a, 0x0e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x4a,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x49, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xf4, 0x02, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x4e,
	0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x4c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x13, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0xae, 0x01, 0x0a,
	0x12, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x70, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x22, 0x2c, 0x0a,
	0x14, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x0e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x48, 0x41, 0x53, 0x48,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x44, 0x48, 0x41, 0x53, 0x48, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x72, 0x65, 0x76, 0x44, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x50, 0x72, 0x65, 0x76, 0x44, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0x22, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x59, 0x10, 0x02, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a,
	0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x22, 0x5d, 0x0a, 0x0e,
	0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x4b,
	0x0a, 0x12, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x0f, 0x4e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x1c,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x14, 0x4e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x04, 0x4d, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x4d, 0x75, 0x74,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x4a, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x49,
	0x4d, 0x45, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x36,
	0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65,
	0x2e, 0x4a, 0x49, 0x44, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4a, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x22, 0x5e, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xad, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e, 0x63,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xae, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x3c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e,
	0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e,
	0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c,
	0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x43, 0x61,
	0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01,
	0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22,
	0x7c, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x79, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x57, 0x41, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x73, 0x45, 0x32, 0x45, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x06, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x11, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2a,
	0x41, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x57, 0x4e, 0x45, 0x52,
	0x10, 0x04, 0x2a, 0x26, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x2a, 0xdd, 0x01, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x47, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12,
	0x10, 0x0a, 0x0c, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10,
	0x09, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0a, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f,
	0x64, 0x65, 0x66, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_snakechat_proto_rawDescOnce sync.Once
	file_snakechat_proto_rawDescData = file_snakechat_proto_rawDesc
)

func file_snakechat_proto_rawDescGZIP() []byte {
	file_snakechat_proto_rawDescOnce.Do(func() {
		file_snakechat_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakechat_proto_rawDescData)
	})
	return file_snakechat_proto_rawDescData
}

var file_snakechat_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_snakechat_proto_msgTypes = make([]protoimpl.MessageInfo, 130)
var file_snakechat_proto_goTypes = []interface{}{
	(NewsletterRole)(0),                                       // 0: snakechat.NewsletterRole
	(NewsletterMuteState)(0),                                  // 1: snakechat.NewsletterMuteState
	(ConnectFailureReason)(0),                                 // 2: snakechat.ConnectFailureReason
	(GroupInfo_GroupMemberAddMode)(0),                         // 3: snakechat.GroupInfo.GroupMemberAddMode
	(WrappedNewsletterState_NewsletterState)(0),               // 4: snakechat.WrappedNewsletterState.NewsletterState
	(NewsletterReactionSettings_NewsletterReactionsMode)(0),   // 5: snakechat.NewsletterReactionSettings.NewsletterReactionsMode
	(NewsletterThreadMetadata_NewsletterVerificationState)(0), // 6: snakechat.NewsletterThreadMetadata.NewsletterVerificationState
	(PrivacySettings_PrivacySetting)(0),                       // 7: snakechat.PrivacySettings.PrivacySetting
	(StatusPrivacy_StatusPrivacyType)(0),                      // 8: snakechat.StatusPrivacy.StatusPrivacyType
	(GroupLinkChange_ChangeType)(0),                           // 9: snakechat.GroupLinkChange.ChangeType
	(PatchInfo_WAPatchName)(0),                                // 10: snakechat.PatchInfo.WAPatchName
	(PairStatus_PStatus)(0),                                   // 11: snakechat.PairStatus.PStatus
	(TemporaryBan_TempBanReason)(0),                           // 12: snakechat.TemporaryBan.TempBanReason
	(Receipt_ReceiptType)(0),                                  // 13: snakechat.Receipt.ReceiptType
	(ChatPresence_ChatPresence)(0),                            // 14: snakechat.ChatPresence.ChatPresence
	(ChatPresence_ChatPresenceMedia)(0),                       // 15: snakechat.ChatPresence.ChatPresenceMedia
	(BlocklistEvent_Actions)(0),                               // 16: snakechat.BlocklistEvent.Actions
	(BlocklistChange_Action)(0),                               // 17: snakechat.BlocklistChange.Action
	(*JID)(nil),                                               // 18: snakechat.JID
	(*MessageInfo)(nil),                                       // 19: snakechat.MessageInfo
	(*UploadResponse)(nil),                                    // 20: snakechat.UploadResponse
	(*MessageSource)(nil),                                     // 21: snakechat.MessageSource
	(*DeviceSentMeta)(nil),                                    // 22: snakechat.DeviceSentMeta
	(*VerifiedName)(nil),                                      // 23: snakechat.VerifiedName
	(*IsOnWhatsAppResponse)(nil),                              // 24: snakechat.IsOnWhatsAppResponse
	(*UserInfo)(nil),                                          // 25: snakechat.UserInfo
	(*Device)(nil),                                            // 26: snakechat.Device
	(*GroupName)(nil),                                         // 27: snakechat.GroupName
	(*GroupTopic)(nil),                                        // 28: snakechat.GroupTopic
	(*GroupLocked)(nil),                                       // 29: snakechat.GroupLocked
	(*GroupAnnounce)(nil),                                     // 30: snakechat.GroupAnnounce
	(*GroupEphemeral)(nil),                                    // 31: snakechat.GroupEphemeral
	(*GroupIncognito)(nil),                                    // 32: snakechat.GroupIncognito
	(*GroupParent)(nil),                                       // 33: snakechat.GroupParent
	(*GroupLinkedParent)(nil),                                 // 34: snakechat.GroupLinkedParent
	(*GroupIsDefaultSub)(nil),                                 // 35: snakechat.GroupIsDefaultSub
	(*GroupParticipantAddRequest)(nil),                        // 36: snakechat.GroupParticipantAddRequest
	(*GroupParticipant)(nil),                                  // 37: snakechat.GroupParticipant
	(*GroupInfo)(nil),                                         // 38: snakechat.GroupInfo
	(*MessageDebugTimings)(nil),                               // 39: snakechat.MessageDebugTimings
	(*SendResponse)(nil),                                      // 40: snakechat.SendResponse
	(*SendMessageReturnFunction)(nil),                         // 41: snakechat.SendMessageReturnFunction
	(*GetGroupInfoReturnFunction)(nil),                        // 42: snakechat.GetGroupInfoReturnFunction
	(*JoinGroupWithLinkReturnFunction)(nil),                   // 43: snakechat.JoinGroupWithLinkReturnFunction
	(*GetGroupInviteLinkReturnFunction)(nil),                  // 44: snakechat.GetGroupInviteLinkReturnFunction
	(*DownloadReturnFunction)(nil),                            // 45: snakechat.DownloadReturnFunction
	(*UploadReturnFunction)(nil),                              // 46: snakechat.UploadReturnFunction
	(*SetGroupPhotoReturnFunction)(nil),                       // 47: snakechat.SetGroupPhotoReturnFunction
	(*IsOnWhatsAppReturnFunction)(nil),                        // 48: snakechat.IsOnWhatsAppReturnFunction
	(*GetUserInfoSingleReturnFunction)(nil),                   // 49: snakechat.GetUserInfoSingleReturnFunction
	(*GetUserInfoReturnFunction)(nil),                         // 50: snakechat.GetUserInfoReturnFunction
	(*BuildPollVoteReturnFunction)(nil),                       // 51: snakechat.BuildPollVoteReturnFunction
	(*CreateNewsLetterReturnFunction)(nil),                    // 52: snakechat.CreateNewsLetterReturnFunction
	(*GetBlocklistReturnFunction)(nil),                        // 53: snakechat.GetBlocklistReturnFunction
	(*GetContactQRLinkReturnFunction)(nil),                    // 54: snakechat.GetContactQRLinkReturnFunction
	(*GetGroupRequestParticipantsReturnFunction)(nil),         // 55: snakechat.GetGroupRequestParticipantsReturnFunction
	(*GetJoinedGroupsReturnFunction)(nil),                     // 56: snakechat.GetJoinedGroupsReturnFunction
	(*ReqCreateGroup)(nil),                                    // 57: snakechat.ReqCreateGroup
	(*JIDArray)(nil),                                          // 58: snakechat.JIDArray
	(*ArrayString)(nil),                                       // 59: snakechat.ArrayString
	(*NewsLetterMessageMeta)(nil),                             // 60: snakechat.NewsLetterMessageMeta
	(*GroupDelete)(nil),                                       // 61: snakechat.GroupDelete
	(*Message)(nil),                                           // 62: snakechat.Message
	(*CreateNewsletterParams)(nil),                            // 63: snakechat.CreateNewsletterParams
	(*WrappedNewsletterState)(nil),                            // 64: snakechat.WrappedNewsletterState
	(*NewsletterText)(nil),                                    // 65: snakechat.NewsletterText
	(*ProfilePictureInfo)(nil),                                // 66: snakechat.ProfilePictureInfo
	(*NewsletterReactionSettings)(nil),                        // 67: snakechat.NewsletterReactionSettings
	(*NewsletterSetting)(nil),                                 // 68: snakechat.NewsletterSetting
	(*NewsletterThreadMetadata)(nil),                          // 69: snakechat.NewsletterThreadMetadata
	(*NewsletterViewerMetadata)(nil),                          // 70: snakechat.NewsletterViewerMetadata
	(*NewsletterMetadata)(nil),                                // 71: snakechat.NewsletterMetadata
	(*Blocklist)(nil),                                         // 72: snakechat.Blocklist
	(*Reaction)(nil),                                          // 73: snakechat.Reaction
	(*NewsletterMessage)(nil),                                 // 74: snakechat.NewsletterMessage
	(*GetNewsletterMessageUpdateReturnFunction)(nil),          // 75: snakechat.GetNewsletterMessageUpdateReturnFunction
	(*PrivacySettings)(nil),                                   // 76: snakechat.PrivacySettings
	(*NodeAttrs)(nil),                                         // 77: snakechat.NodeAttrs
	(*Node)(nil),                                              // 78: snakechat.Node
	(*InfoQuery)(nil),                                         // 79: snakechat.InfoQuery
	(*GetProfilePictureParams)(nil),                           // 80: snakechat.GetProfilePictureParams
	(*GetProfilePictureReturnFunction)(nil),                   // 81: snakechat.GetProfilePictureReturnFunction
	(*StatusPrivacy)(nil),                                     // 82: snakechat.StatusPrivacy
	(*GetStatusPrivacyReturnFunction)(nil),                    // 83: snakechat.GetStatusPrivacyReturnFunction
	(*GroupLinkTarget)(nil),                                   // 84: snakechat.GroupLinkTarget
	(*GroupLinkChange)(nil),                                   // 85: snakechat.GroupLinkChange
	(*GetSubGroupsReturnFunction)(nil),                        // 86: snakechat.GetSubGroupsReturnFunction
	(*GetSubscribedNewslettersReturnFunction)(nil),            // 87: snakechat.GetSubscribedNewslettersReturnFunction
	(*GetUserDevicesreturnFunction)(nil),                      // 88: snakechat.GetUserDevicesreturnFunction
	(*NewsletterSubscribeLiveUpdatesReturnFunction)(nil),      // 89: snakechat.NewsletterSubscribeLiveUpdatesReturnFunction
	(*PairPhoneParams)(nil),                                   // 90: snakechat.PairPhoneParams
	(*ContactQRLinkTarget)(nil),                               // 91: snakechat.ContactQRLinkTarget
	(*ResolveContactQRLinkReturnFunction)(nil),                // 92: snakechat.ResolveContactQRLinkReturnFunction
	(*BusinessMessageLinkTarget)(nil),                         // 93: snakechat.BusinessMessageLinkTarget
	(*ResolveBusinessMessageLinkReturnFunction)(nil),          // 94: snakechat.ResolveBusinessMessageLinkReturnFunction
	(*MutationInfo)(nil),                                      // 95: snakechat.MutationInfo
	(*PatchInfo)(nil),                                         // 96: snakechat.PatchInfo
	(*ContactsPutPushNameReturnFunction)(nil),                 // 97: snakechat.ContactsPutPushNameReturnFunction
	(*ContactEntry)(nil),                                      // 98: snakechat.ContactEntry
	(*ContactEntryArray)(nil),                                 // 99: snakechat.ContactEntryArray
	(*SetPrivacySettingReturnFunction)(nil),                   // 100: snakechat.SetPrivacySettingReturnFunction
	(*ContactsGetContactReturnFunction)(nil),                  // 101: snakechat.ContactsGetContactReturnFunction
	(*ContactInfo)(nil),                                       // 102: snakechat.ContactInfo
	(*Contact)(nil),                                           // 103: snakechat.Contact
	(*ContactsGetAllContactsReturnFunction)(nil),              // 104: snakechat.ContactsGetAllContactsReturnFunction
	(*QR)(nil),                                          // 105: snakechat.QR
	(*PairStatus)(nil),                                  // 106: snakechat.PairStatus
	(*Connected)(nil),                                   // 107: snakechat.Connected
	(*KeepAliveTimeout)(nil),                            // 108: snakechat.KeepAliveTimeout
	(*KeepAliveRestored)(nil),                           // 109: snakechat.KeepAliveRestored
	(*LoggedOut)(nil),                                   // 110: snakechat.LoggedOut
	(*StreamReplaced)(nil),                              // 111: snakechat.StreamReplaced
	(*TemporaryBan)(nil),                                // 112: snakechat.TemporaryBan
	(*ConnectFailure)(nil),                              // 113: snakechat.ConnectFailure
	(*ClientOutdated)(nil),                              // 114: snakechat.ClientOutdated
	(*StreamError)(nil),                                 // 115: snakechat.StreamError
	(*Disconnected)(nil),                                // 116: snakechat.Disconnected
	(*HistorySync)(nil),                                 // 117: snakechat.HistorySync
	(*Receipt)(nil),                                     // 118: snakechat.Receipt
	(*ChatPresence)(nil),                                // 119: snakechat.ChatPresence
	(*Presence)(nil),                                    // 120: snakechat.Presence
	(*JoinedGroup)(nil),                                 // 121: snakechat.JoinedGroup
	(*GroupInfoEvent)(nil),                              // 122: snakechat.GroupInfoEvent
	(*Picture)(nil),                                     // 123: snakechat.Picture
	(*IdentityChange)(nil),                              // 124: snakechat.IdentityChange
	(*PrivacySettingsEvent)(nil),                        // 125: snakechat.privacySettingsEvent
	(*OfflineSyncPreview)(nil),                          // 126: snakechat.OfflineSyncPreview
	(*OfflineSyncCompleted)(nil),                        // 127: snakechat.OfflineSyncCompleted
	(*BlocklistEvent)(nil),                              // 128: snakechat.BlocklistEvent
	(*BlocklistChange)(nil),                             // 129: snakechat.BlocklistChange
	(*NewsletterJoin)(nil),                              // 130: snakechat.NewsletterJoin
	(*NewsletterLeave)(nil),                             // 131: snakechat.NewsletterLeave
	(*NewsletterMuteChange)(nil),                        // 132: snakechat.NewsletterMuteChange
	(*NewsletterLiveUpdate)(nil),                        // 133: snakechat.NewsletterLiveUpdate
	(*BasicCallMeta)(nil),                               // 134: snakechat.BasicCallMeta
	(*CallRemoteMeta)(nil),                              // 135: snakechat.CallRemoteMeta
	(*CallOffer)(nil),                                   // 136: snakechat.CallOffer
	(*CallAccept)(nil),                                  // 137: snakechat.CallAccept
	(*CallPreAccept)(nil),                               // 138: snakechat.CallPreAccept
	(*CallTransport)(nil),                               // 139: snakechat.CallTransport
	(*CallOfferNotice)(nil),                             // 140: snakechat.CallOfferNotice
	(*CallRelayLatency)(nil),                            // 141: snakechat.CallRelayLatency
	(*CallTerminate)(nil),                               // 142: snakechat.CallTerminate
	(*UnknownCallEvent)(nil),                            // 143: snakechat.UnknownCallEvent
	(*UpdateGroupParticipantsReturnFunction)(nil),       // 144: snakechat.UpdateGroupParticipantsReturnFunction
	(*GetMessageForRetryReturnFunction)(nil),            // 145: snakechat.GetMessageForRetryReturnFunction
	(*LocalChatSettings)(nil),                           // 146: snakechat.LocalChatSettings
	(*ReturnFunctionWithError)(nil),                     // 147: snakechat.ReturnFunctionWithError
	(*waVnameCert.VerifiedNameCertificate)(nil),         // 148: WAWebProtobufsVnameCert.VerifiedNameCertificate
	(*waVnameCert.VerifiedNameCertificate_Details)(nil), // 149: WAWebProtobufsVnameCert.VerifiedNameCertificate.Details
	(*waE2E.Message)(nil),                               // 150: WAWebProtobufsE2E.Message
	(*waWeb.WebMessageInfo)(nil),                        // 151: WAWebProtobufsWeb.WebMessageInfo
	(*waSyncAction.SyncActionValue)(nil),                // 152: WASyncAction.SyncActionValue
	(*waHistorySync.HistorySync)(nil),                   // 153: WAWebProtobufsHistorySync.HistorySync
}
var file_snakechat_proto_depIdxs = []int32{
	21,  // 0: snakechat.MessageInfo.MessageSource:type_name -> snakechat.MessageSource
	23,  // 1: snakechat.MessageInfo.VerifiedName:type_name -> snakechat.VerifiedName
	22,  // 2: snakechat.MessageInfo.DeviceSentMeta:type_name -> snakechat.DeviceSentMeta
	18,  // 3: snakechat.MessageSource.Chat:type_name -> snakechat.JID
	18,  // 4: snakechat.MessageSource.Sender:type_name -> snakechat.JID
	18,  // 5: snakechat.MessageSource.BroadcastListOwner:type_name -> snakechat.JID
	148, // 6: snakechat.VerifiedName.Certificate:type_name -> WAWebProtobufsVnameCert.VerifiedNameCertificate
	149, // 7: snakechat.VerifiedName.Details:type_name -> WAWebProtobufsVnameCert.VerifiedNameCertificate.Details
	18,  // 8: snakechat.IsOnWhatsAppResponse.JID:type_name -> snakechat.JID
	23,  // 9: snakechat.IsOnWhatsAppResponse.VerifiedName:type_name -> snakechat.VerifiedName
	23,  // 10: snakechat.UserInfo.VerifiedName:type_name -> snakechat.VerifiedName
	18,  // 11: snakechat.UserInfo.Devices:type_name -> snakechat.JID
	18,  // 12: snakechat.Device.JID:type_name -> snakechat.JID
	18,  // 13: snakechat.GroupName.NameSetBy:type_name -> snakechat.JID
	18,  // 14: snakechat.GroupTopic.TopicSetBy:type_name -> snakechat.JID
	18,  // 15: snakechat.GroupLinkedParent.LinkedParentJID:type_name -> snakechat.JID
	18,  // 16: snakechat.GroupParticipant.JID:type_name -> snakechat.JID
	18,  // 17: snakechat.GroupParticipant.LID:type_name -> snakechat.JID
	36,  // 18: snakechat.GroupParticipant.AddRequest:type_name -> snakechat.GroupParticipantAddRequest
	18,  // 19: snakechat.GroupInfo.OwnerJID:type_name -> snakechat.JID
	18,  // 20: snakechat.GroupInfo.JID:type_name -> snakechat.JID
	27,  // 21: snakechat.GroupInfo.GroupName:type_name -> snakechat.GroupName
	28,  // 22: snakechat.GroupInfo.GroupTopic:type_name -> snakechat.GroupTopic
	29,  // 23: snakechat.GroupInfo.GroupLocked:type_name -> snakechat.GroupLocked
	30,  // 24: snakechat.GroupInfo.GroupAnnounce:type_name -> snakechat.GroupAnnounce
	31,  // 25: snakechat.GroupInfo.GroupEphemeral:type_name -> snakechat.GroupEphemeral
	32,  // 26: snakechat.GroupInfo.GroupIncognito:type_name -> snakechat.GroupIncognito
	33,  // 27: snakechat.GroupInfo.GroupParent:type_name -> snakechat.GroupParent
	34,  // 28: snakechat.GroupInfo.GroupLinkedParent:type_name -> snakechat.GroupLinkedParent
	35,  // 29: snakechat.GroupInfo.GroupIsDefaultSub:type_name -> snakechat.GroupIsDefaultSub
	37,  // 30: snakechat.GroupInfo.Participants:type_name -> snakechat.GroupParticipant
	39,  // 31: snakechat.SendResponse.DebugTimings:type_name -> snakechat.MessageDebugTimings
	40,  // 32: snakechat.SendMessageReturnFunction.SendResponse:type_name -> snakechat.SendResponse
	38,  // 33: snakechat.GetGroupInfoReturnFunction.GroupInfo:type_name -> snakechat.GroupInfo
	18,  // 34: snakechat.JoinGroupWithLinkReturnFunction.Jid:type_name -> snakechat.JID
	20,  // 35: snakechat.UploadReturnFunction.UploadResponse:type_name -> snakechat.UploadResponse
	24,  // 36: snakechat.IsOnWhatsAppReturnFunction.IsOnWhatsAppResponse:type_name -> snakechat.IsOnWhatsAppResponse
	18,  // 37: snakechat.GetUserInfoSingleReturnFunction.JID:type_name -> snakechat.JID
	25,  // 38: snakechat.GetUserInfoSingleReturnFunction.UserInfo:type_name -> snakechat.UserInfo
	49,  // 39: snakechat.GetUserInfoReturnFunction.UsersInfo:type_name -> snakechat.GetUserInfoSingleReturnFunction
	150, // 40: snakechat.BuildPollVoteReturnFunction.PollVote:type_name -> WAWebProtobufsE2E.Message
	71,  // 41: snakechat.CreateNewsLetterReturnFunction.NewsletterMetadata:type_name -> snakechat.NewsletterMetadata
	72,  // 42: snakechat.GetBlocklistReturnFunction.Blocklist:type_name -> snakechat.Blocklist
	18,  // 43: snakechat.GetGroupRequestParticipantsReturnFunction.Participants:type_name -> snakechat.JID
	38,  // 44: snakechat.GetJoinedGroupsReturnFunction.Group:type_name -> snakechat.GroupInfo
	18,  // 45: snakechat.ReqCreateGroup.Participants:type_name -> snakechat.JID
	33,  // 46: snakechat.ReqCreateGroup.GroupParent:type_name -> snakechat.GroupParent
	34,  // 47: snakechat.ReqCreateGroup.GroupLinkedParent:type_name -> snakechat.GroupLinkedParent
	18,  // 48: snakechat.JIDArray.JIDS:type_name -> snakechat.JID
	19,  // 49: snakechat.Message.Info:type_name -> snakechat.MessageInfo
	150, // 50: snakechat.Message.Message:type_name -> WAWebProtobufsE2E.Message
	151, // 51: snakechat.Message.SourceWebMsg:type_name -> WAWebProtobufsWeb.WebMessageInfo
	60,  // 52: snakechat.Message.NewsLetterMeta:type_name -> snakechat.NewsLetterMessageMeta
	4,   // 53: snakechat.WrappedNewsletterState.Type:type_name -> snakechat.WrappedNewsletterState.NewsletterState
	5,   // 54: snakechat.NewsletterReactionSettings.Value:type_name -> snakechat.NewsletterReactionSettings.NewsletterReactionsMode
	67,  // 55: snakechat.NewsletterSetting.ReactionCodes:type_name -> snakechat.NewsletterReactionSettings
	65,  // 56: snakechat.NewsletterThreadMetadata.Name:type_name -> snakechat.NewsletterText
	65,  // 57: snakechat.NewsletterThreadMetadata.Description:type_name -> snakechat.NewsletterText
	6,   // 58: snakechat.NewsletterThreadMetadata.VerificationState:type_name -> snakechat.NewsletterThreadMetadata.NewsletterVerificationState
	66,  // 59: snakechat.NewsletterThreadMetadata.Picture:type_name -> snakechat.ProfilePictureInfo
	66,  // 60: snakechat.NewsletterThreadMetadata.Preview:type_name -> snakechat.ProfilePictureInfo
	68,  // 61: snakechat.NewsletterThreadMetadata.Settings:type_name -> snakechat.NewsletterSetting
	1,   // 62: snakechat.NewsletterViewerMetadata.Mute:type_name -> snakechat.NewsletterMuteState
	0,   // 63: snakechat.NewsletterViewerMetadata.Role:type_name -> snakechat.NewsletterRole
	18,  // 64: snakechat.NewsletterMetadata.ID:type_name -> snakechat.JID
	64,  // 65: snakechat.NewsletterMetadata.State:type_name -> snakechat.WrappedNewsletterState
	69,  // 66: snakechat.NewsletterMetadata.ThreadMeta:type_name -> snakechat.NewsletterThreadMetadata
	70,  // 67: snakechat.NewsletterMetadata.ViewerMeta:type_name -> snakechat.NewsletterViewerMetadata
	18,  // 68: snakechat.Blocklist.JIDs:type_name -> snakechat.JID
	73,  // 69: snakechat.NewsletterMessage.ReactionCounts:type_name -> snakechat.Reaction
	150, // 70: snakechat.NewsletterMessage.Message:type_name -> WAWebProtobufsE2E.Message
	74,  // 71: snakechat.GetNewsletterMessageUpdateReturnFunction.NewsletterMessage:type_name -> snakechat.NewsletterMessage
	7,   // 72: snakechat.PrivacySettings.GroupAdd:type_name -> snakechat.PrivacySettings.PrivacySetting
	7,   // 73: snakechat.PrivacySettings.LastSeen:type_name -> snakechat.PrivacySettings.PrivacySetting
	7,   // 74: snakechat.PrivacySettings.Status:type_name -> snakechat.PrivacySettings.PrivacySetting
	7,   // 75: snakechat.PrivacySettings.Profile:type_name -> snakechat.PrivacySettings.PrivacySetting
	7,   // 76: snakechat.PrivacySettings.ReadReceipts:type_name -> snakechat.PrivacySettings.PrivacySetting
	7,   // 77: snakechat.PrivacySettings.CallAdd:type_name -> snakechat.PrivacySettings.PrivacySetting
	7,   // 78: snakechat.PrivacySettings.Online:type_name -> snakechat.PrivacySettings.PrivacySetting
	18,  // 79: snakechat.NodeAttrs.jid:type_name -> snakechat.JID
	77,  // 80: snakechat.Node.Attrs:type_name -> snakechat.NodeAttrs
	78,  // 81: snakechat.Node.Nodes:type_name -> snakechat.Node
	78,  // 82: snakechat.InfoQuery.Content:type_name -> snakechat.Node
	66,  // 83: snakechat.GetProfilePictureReturnFunction.Picture:type_name -> snakechat.ProfilePictureInfo
	8,   // 84: snakechat.StatusPrivacy.Type:type_name -> snakechat.StatusPrivacy.StatusPrivacyType
	18,  // 85: snakechat.StatusPrivacy.List:type_name -> snakechat.JID
	82,  // 86: snakechat.GetStatusPrivacyReturnFunction.StatusPrivacy:type_name -> snakechat.StatusPrivacy
	18,  // 87: snakechat.GroupLinkTarget.JID:type_name -> snakechat.JID
	27,  // 88: snakechat.GroupLinkTarget.GroupName:type_name -> snakechat.GroupName
	35,  // 89: snakechat.GroupLinkTarget.GroupIsDefaultSub:type_name -> snakechat.GroupIsDefaultSub
	9,   // 90: snakechat.GroupLinkChange.Type:type_name -> snakechat.GroupLinkChange.ChangeType
	84,  // 91: snakechat.GroupLinkChange.Group:type_name -> snakechat.GroupLinkTarget
	84,  // 92: snakechat.GetSubGroupsReturnFunction.GroupLinkTarget:type_name -> snakechat.GroupLinkTarget
	71,  // 93: snakechat.GetSubscribedNewslettersReturnFunction.Newsletter:type_name -> snakechat.NewsletterMetadata
	18,  // 94: snakechat.GetUserDevicesreturnFunction.JID:type_name -> snakechat.JID
	18,  // 95: snakechat.ContactQRLinkTarget.JID:type_name -> snakechat.JID
	91,  // 96: snakechat.ResolveContactQRLinkReturnFunction.ContactQrLink:type_name -> snakechat.ContactQRLinkTarget
	18,  // 97: snakechat.BusinessMessageLinkTarget.JID:type_name -> snakechat.JID
	93,  // 98: snakechat.ResolveBusinessMessageLinkReturnFunction.MessageLinkTarget:type_name -> snakechat.BusinessMessageLinkTarget
	152, // 99: snakechat.MutationInfo.Value:type_name -> WASyncAction.SyncActionValue
	10,  // 100: snakechat.PatchInfo.Type:type_name -> snakechat.PatchInfo.WAPatchName
	95,  // 101: snakechat.PatchInfo.Mutations:type_name -> snakechat.MutationInfo
	18,  // 102: snakechat.ContactEntry.JID:type_name -> snakechat.JID
	98,  // 103: snakechat.ContactEntryArray.ContactEntry:type_name -> snakechat.ContactEntry
	76,  // 104: snakechat.SetPrivacySettingReturnFunction.settings:type_name -> snakechat.PrivacySettings
	102, // 105: snakechat.ContactsGetContactReturnFunction.ContactInfo:type_name -> snakechat.ContactInfo
	18,  // 106: snakechat.Contact.JID:type_name -> snakechat.JID
	102, // 107: snakechat.Contact.Info:type_name -> snakechat.ContactInfo
	103, // 108: snakechat.ContactsGetAllContactsReturnFunction.Contact:type_name -> snakechat.Contact
	18,  // 109: snakechat.PairStatus.ID:type_name -> snakechat.JID
	11,  // 110: snakechat.PairStatus.Status:type_name -> snakechat.PairStatus.PStatus
	2,   // 111: snakechat.LoggedOut.Reason:type_name -> snakechat.ConnectFailureReason
	12,  // 112: snakechat.TemporaryBan.Code:type_name -> snakechat.TemporaryBan.TempBanReason
	2,   // 113: snakechat.ConnectFailure.Reason:type_name -> snakechat.ConnectFailureReason
	78,  // 114: snakechat.ConnectFailure.Raw:type_name -> snakechat.Node
	78,  // 115: snakechat.StreamError.Raw:type_name -> snakechat.Node
	153, // 116: snakechat.HistorySync.Data:type_name -> WAWebProtobufsHistorySync.HistorySync
	21,  // 117: snakechat.Receipt.MessageSource:type_name -> snakechat.MessageSource
	13,  // 118: snakechat.Receipt.Type:type_name -> snakechat.Receipt.ReceiptType
	21,  // 119: snakechat.ChatPresence.MessageSource:type_name -> snakechat.MessageSource
	14,  // 120: snakechat.ChatPresence.State:type_name -> snakechat.ChatPresence.ChatPresence
	15,  // 121: snakechat.ChatPresence.Media:type_name -> snakechat.ChatPresence.ChatPresenceMedia
	18,  // 122: snakechat.Presence.From:type_name -> snakechat.JID
	38,  // 123: snakechat.JoinedGroup.GroupInfo:type_name -> snakechat.GroupInfo
	18,  // 124: snakechat.GroupInfoEvent.JID:type_name -> snakechat.JID
	18,  // 125: snakechat.GroupInfoEvent.Sender:type_name -> snakechat.JID
	27,  // 126: snakechat.GroupInfoEvent.Name:type_name -> snakechat.GroupName
	28,  // 127: snakechat.GroupInfoEvent.Topic:type_name -> snakechat.GroupTopic
	29,  // 128: snakechat.GroupInfoEvent.Locked:type_name -> snakechat.GroupLocked
	30,  // 129: snakechat.GroupInfoEvent.Announce:type_name -> snakechat.GroupAnnounce
	31,  // 130: snakechat.GroupInfoEvent.Ephemeral:type_name -> snakechat.GroupEphemeral
	61,  // 131: snakechat.GroupInfoEvent.Delete:type_name -> snakechat.GroupDelete
	85,  // 132: snakechat.GroupInfoEvent.Link:type_name -> snakechat.GroupLinkChange
	85,  // 133: snakechat.GroupInfoEvent.Unlink:type_name -> snakechat.GroupLinkChange
	18,  // 134: snakechat.GroupInfoEvent.Join:type_name -> snakechat.JID
	18,  // 135: snakechat.GroupInfoEvent.Leave:type_name -> snakechat.JID
	18,  // 136: snakechat.GroupInfoEvent.Promote:type_name -> snakechat.JID
	18,  // 137: snakechat.GroupInfoEvent.Demote:type_name -> snakechat.JID
	78,  // 138: snakechat.GroupInfoEvent.UnknownChanges:type_name -> snakechat.Node
	18,  // 139: snakechat.Picture.JID:type_name -> snakechat.JID
	18,  // 140: snakechat.Picture.Author:type_name -> snakechat.JID
	18,  // 141: snakechat.IdentityChange.JID:type_name -> snakechat.JID
	76,  // 142: snakechat.privacySettingsEvent.NewSettings:type_name -> snakechat.PrivacySettings
	16,  // 143: snakechat.BlocklistEvent.Action:type_name -> snakechat.BlocklistEvent.Actions
	129, // 144: snakechat.BlocklistEvent.Changes:type_name -> snakechat.BlocklistChange
	18,  // 145: snakechat.BlocklistChange.JID:type_name -> snakechat.JID
	17,  // 146: snakechat.BlocklistChange.BlockAction:type_name -> snakechat.BlocklistChange.Action
	71,  // 147: snakechat.NewsletterJoin.NewsletterMetadata:type_name -> snakechat.NewsletterMetadata
	18,  // 148: snakechat.NewsletterLeave.ID:type_name -> snakechat.JID
	0,   // 149: snakechat.NewsletterLeave.Role:type_name -> snakechat.NewsletterRole
	18,  // 150: snakechat.NewsletterMuteChange.ID:type_name -> snakechat.JID
	1,   // 151: snakechat.NewsletterMuteChange.Mute:type_name -> snakechat.NewsletterMuteState
	18,  // 152: snakechat.NewsletterLiveUpdate.JID:type_name -> snakechat.JID
	74,  // 153: snakechat.NewsletterLiveUpdate.Messages:type_name -> snakechat.NewsletterMessage
	18,  // 154: snakechat.BasicCallMeta.from:type_name -> snakechat.JID
	18,  // 155: snakechat.BasicCallMeta.callCreator:type_name -> snakechat.JID
	134, // 156: snakechat.CallOffer.basicCallMeta:type_name -> snakechat.BasicCallMeta
	135, // 157: snakechat.CallOffer.callRemoteMeta:type_name -> snakechat.CallRemoteMeta
	78,  // 158: snakechat.CallOffer.data:type_name -> snakechat.Node
	134, // 159: snakechat.CallAccept.basicCallMeta:type_name -> snakechat.BasicCallMeta
	135, // 160: snakechat.CallAccept.callRemoteMeta:type_name -> snakechat.CallRemoteMeta
	78,  // 161: snakechat.CallAccept.data:type_name -> snakechat.Node
	134, // 162: snakechat.CallPreAccept.basicCallMeta:type_name -> snakechat.BasicCallMeta
	135, // 163: snakechat.CallPreAccept.callRemoteMeta:type_name -> snakechat.CallRemoteMeta
	78,  // 164: snakechat.CallPreAccept.data:type_name -> snakechat.Node
	134, // 165: snakechat.CallTransport.basicCallMeta:type_name -> snakechat.BasicCallMeta
	135, // 166: snakechat.CallTransport.callRemoteMeta:type_name -> snakechat.CallRemoteMeta
	78,  // 167: snakechat.CallTransport.data:type_name -> snakechat.Node
	134, // 168: snakechat.CallOfferNotice.basicCallMeta:type_name -> snakechat.BasicCallMeta
	78,  // 169: snakechat.CallOfferNotice.data:type_name -> snakechat.Node
	134, // 170: snakechat.CallRelayLatency.basicCallMeta:type_name -> snakechat.BasicCallMeta
	78,  // 171: snakechat.CallRelayLatency.data:type_name -> snakechat.Node
	134, // 172: snakechat.CallTerminate.basicCallMeta:type_name -> snakechat.BasicCallMeta
	78,  // 173: snakechat.CallTerminate.data:type_name -> snakechat.Node
	78,  // 174: snakechat.UnknownCallEvent.node:type_name -> snakechat.Node
	37,  // 175: snakechat.UpdateGroupParticipantsReturnFunction.participants:type_name -> snakechat.GroupParticipant
	150, // 176: snakechat.GetMessageForRetryReturnFunction.Message:type_name -> WAWebProtobufsE2E.Message
	146, // 177: snakechat.ReturnFunctionWithError.LocalChatSettings:type_name -> snakechat.LocalChatSettings
	178, // [178:178] is the sub-list for method output_type
	178, // [178:178] is the sub-list for method input_type
	178, // [178:178] is the sub-list for extension type_name
	178, // [178:178] is the sub-list for extension extendee
	0,   // [0:178] is the sub-list for field type_name
}

func init() { file_snakechat_proto_init() }
func file_snakechat_proto_init() {
	if File_snakechat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snakechat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSentMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiedName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOnWhatsAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAnnounce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupEphemeral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIncognito); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupParent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLinkedParent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIsDefaultSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupParticipantAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDebugTimings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupWithLinkReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInviteLinkReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupPhotoReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOnWhatsAppReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoSingleReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildPollVoteReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewsLetterReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocklistReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactQRLinkReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupRequestParticipantsReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinedGroupsReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JIDArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsLetterMessageMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewsletterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrappedNewsletterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePictureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterReactionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterThreadMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterViewerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blocklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsletterMessageUpdateReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivacySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAttrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfilePictureParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfilePictureReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusPrivacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusPrivacyReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLinkTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLinkChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubGroupsReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscribedNewslettersReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDevicesreturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterSubscribeLiveUpdatesReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairPhoneParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactQRLinkTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveContactQRLinkReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessMessageLinkTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveBusinessMessageLinkReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsPutPushNameReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactEntryArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrivacySettingReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetContactReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetAllContactsReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveRestored); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReplaced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporaryBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientOutdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistorySync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinedGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Picture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivacySettingsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineSyncPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineSyncCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocklistEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocklistChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterMuteChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsletterLiveUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicCallMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRemoteMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallAccept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallPreAccept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallTransport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallOfferNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRelayLatency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallTerminate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownCallEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupParticipantsReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageForRetryReturnFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalChatSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakechat_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnFunctionWithError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snakechat_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*NodeAttrs_Boolean)(nil),
		(*NodeAttrs_Integer)(nil),
		(*NodeAttrs_Text)(nil),
		(*NodeAttrs_Jid)(nil),
	}
	file_snakechat_proto_msgTypes[129].OneofWrappers = []interface{}{
		(*ReturnFunctionWithError_LocalChatSettings)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakechat_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   130,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakechat_proto_goTypes,
		DependencyIndexes: file_snakechat_proto_depIdxs,
		EnumInfos:         file_snakechat_proto_enumTypes,
		MessageInfos:      file_snakechat_proto_msgTypes,
	}.Build()
	File_snakechat_proto = out.File
	file_snakechat_proto_rawDesc = nil
	file_snakechat_proto_goTypes = nil
	file_snakechat_proto_depIdxs = nil
}
